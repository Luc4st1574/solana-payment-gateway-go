// Code generated by ent, DO NOT EDIT.

package paymentverifications

import (
	"bitsnake-server/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldUserID, v))
}

// WalletAddress applies equality check predicate on the "wallet_address" field. It's identical to WalletAddressEQ.
func WalletAddress(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldWalletAddress, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.PaymentVerifications {
	vc := float64(v)
	return predicate.PaymentVerifications(sql.FieldEQ(FieldAmount, vc))
}

// TransactionHash applies equality check predicate on the "transaction_hash" field. It's identical to TransactionHashEQ.
func TransactionHash(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldTransactionHash, v))
}

// AccessGranted applies equality check predicate on the "access_granted" field. It's identical to AccessGrantedEQ.
func AccessGranted(v bool) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldAccessGranted, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNotIn(FieldUserID, vs...))
}

// WalletAddressEQ applies the EQ predicate on the "wallet_address" field.
func WalletAddressEQ(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldWalletAddress, v))
}

// WalletAddressNEQ applies the NEQ predicate on the "wallet_address" field.
func WalletAddressNEQ(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNEQ(FieldWalletAddress, v))
}

// WalletAddressIn applies the In predicate on the "wallet_address" field.
func WalletAddressIn(vs ...string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldIn(FieldWalletAddress, vs...))
}

// WalletAddressNotIn applies the NotIn predicate on the "wallet_address" field.
func WalletAddressNotIn(vs ...string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNotIn(FieldWalletAddress, vs...))
}

// WalletAddressGT applies the GT predicate on the "wallet_address" field.
func WalletAddressGT(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldGT(FieldWalletAddress, v))
}

// WalletAddressGTE applies the GTE predicate on the "wallet_address" field.
func WalletAddressGTE(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldGTE(FieldWalletAddress, v))
}

// WalletAddressLT applies the LT predicate on the "wallet_address" field.
func WalletAddressLT(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldLT(FieldWalletAddress, v))
}

// WalletAddressLTE applies the LTE predicate on the "wallet_address" field.
func WalletAddressLTE(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldLTE(FieldWalletAddress, v))
}

// WalletAddressContains applies the Contains predicate on the "wallet_address" field.
func WalletAddressContains(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldContains(FieldWalletAddress, v))
}

// WalletAddressHasPrefix applies the HasPrefix predicate on the "wallet_address" field.
func WalletAddressHasPrefix(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldHasPrefix(FieldWalletAddress, v))
}

// WalletAddressHasSuffix applies the HasSuffix predicate on the "wallet_address" field.
func WalletAddressHasSuffix(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldHasSuffix(FieldWalletAddress, v))
}

// WalletAddressEqualFold applies the EqualFold predicate on the "wallet_address" field.
func WalletAddressEqualFold(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEqualFold(FieldWalletAddress, v))
}

// WalletAddressContainsFold applies the ContainsFold predicate on the "wallet_address" field.
func WalletAddressContainsFold(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldContainsFold(FieldWalletAddress, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.PaymentVerifications {
	vc := float64(v)
	return predicate.PaymentVerifications(sql.FieldEQ(FieldAmount, vc))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.PaymentVerifications {
	vc := float64(v)
	return predicate.PaymentVerifications(sql.FieldNEQ(FieldAmount, vc))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.PaymentVerifications {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.PaymentVerifications(sql.FieldIn(FieldAmount, v...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.PaymentVerifications {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.PaymentVerifications(sql.FieldNotIn(FieldAmount, v...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.PaymentVerifications {
	vc := float64(v)
	return predicate.PaymentVerifications(sql.FieldGT(FieldAmount, vc))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.PaymentVerifications {
	vc := float64(v)
	return predicate.PaymentVerifications(sql.FieldGTE(FieldAmount, vc))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.PaymentVerifications {
	vc := float64(v)
	return predicate.PaymentVerifications(sql.FieldLT(FieldAmount, vc))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.PaymentVerifications {
	vc := float64(v)
	return predicate.PaymentVerifications(sql.FieldLTE(FieldAmount, vc))
}

// TransactionHashEQ applies the EQ predicate on the "transaction_hash" field.
func TransactionHashEQ(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldTransactionHash, v))
}

// TransactionHashNEQ applies the NEQ predicate on the "transaction_hash" field.
func TransactionHashNEQ(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNEQ(FieldTransactionHash, v))
}

// TransactionHashIn applies the In predicate on the "transaction_hash" field.
func TransactionHashIn(vs ...string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldIn(FieldTransactionHash, vs...))
}

// TransactionHashNotIn applies the NotIn predicate on the "transaction_hash" field.
func TransactionHashNotIn(vs ...string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNotIn(FieldTransactionHash, vs...))
}

// TransactionHashGT applies the GT predicate on the "transaction_hash" field.
func TransactionHashGT(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldGT(FieldTransactionHash, v))
}

// TransactionHashGTE applies the GTE predicate on the "transaction_hash" field.
func TransactionHashGTE(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldGTE(FieldTransactionHash, v))
}

// TransactionHashLT applies the LT predicate on the "transaction_hash" field.
func TransactionHashLT(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldLT(FieldTransactionHash, v))
}

// TransactionHashLTE applies the LTE predicate on the "transaction_hash" field.
func TransactionHashLTE(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldLTE(FieldTransactionHash, v))
}

// TransactionHashContains applies the Contains predicate on the "transaction_hash" field.
func TransactionHashContains(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldContains(FieldTransactionHash, v))
}

// TransactionHashHasPrefix applies the HasPrefix predicate on the "transaction_hash" field.
func TransactionHashHasPrefix(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldHasPrefix(FieldTransactionHash, v))
}

// TransactionHashHasSuffix applies the HasSuffix predicate on the "transaction_hash" field.
func TransactionHashHasSuffix(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldHasSuffix(FieldTransactionHash, v))
}

// TransactionHashIsNil applies the IsNil predicate on the "transaction_hash" field.
func TransactionHashIsNil() predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldIsNull(FieldTransactionHash))
}

// TransactionHashNotNil applies the NotNil predicate on the "transaction_hash" field.
func TransactionHashNotNil() predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNotNull(FieldTransactionHash))
}

// TransactionHashEqualFold applies the EqualFold predicate on the "transaction_hash" field.
func TransactionHashEqualFold(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEqualFold(FieldTransactionHash, v))
}

// TransactionHashContainsFold applies the ContainsFold predicate on the "transaction_hash" field.
func TransactionHashContainsFold(v string) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldContainsFold(FieldTransactionHash, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNotIn(FieldStatus, vs...))
}

// AccessGrantedEQ applies the EQ predicate on the "access_granted" field.
func AccessGrantedEQ(v bool) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldAccessGranted, v))
}

// AccessGrantedNEQ applies the NEQ predicate on the "access_granted" field.
func AccessGrantedNEQ(v bool) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNEQ(FieldAccessGranted, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PaymentVerifications {
	return predicate.PaymentVerifications(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.Users) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentVerifications) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentVerifications) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentVerifications) predicate.PaymentVerifications {
	return predicate.PaymentVerifications(sql.NotPredicates(p))
}
