// Code generated by ent, DO NOT EDIT.

package matchresults

import (
	"bitsnake-server/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldLTE(FieldID, id))
}

// Kills applies equality check predicate on the "kills" field. It's identical to KillsEQ.
func Kills(v int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldEQ(FieldKills, v))
}

// IsWinner applies equality check predicate on the "is_winner" field. It's identical to IsWinnerEQ.
func IsWinner(v bool) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldEQ(FieldIsWinner, v))
}

// RewardAmount applies equality check predicate on the "reward_amount" field. It's identical to RewardAmountEQ.
func RewardAmount(v float64) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldEQ(FieldRewardAmount, v))
}

// KillsEQ applies the EQ predicate on the "kills" field.
func KillsEQ(v int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldEQ(FieldKills, v))
}

// KillsNEQ applies the NEQ predicate on the "kills" field.
func KillsNEQ(v int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldNEQ(FieldKills, v))
}

// KillsIn applies the In predicate on the "kills" field.
func KillsIn(vs ...int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldIn(FieldKills, vs...))
}

// KillsNotIn applies the NotIn predicate on the "kills" field.
func KillsNotIn(vs ...int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldNotIn(FieldKills, vs...))
}

// KillsGT applies the GT predicate on the "kills" field.
func KillsGT(v int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldGT(FieldKills, v))
}

// KillsGTE applies the GTE predicate on the "kills" field.
func KillsGTE(v int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldGTE(FieldKills, v))
}

// KillsLT applies the LT predicate on the "kills" field.
func KillsLT(v int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldLT(FieldKills, v))
}

// KillsLTE applies the LTE predicate on the "kills" field.
func KillsLTE(v int) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldLTE(FieldKills, v))
}

// IsWinnerEQ applies the EQ predicate on the "is_winner" field.
func IsWinnerEQ(v bool) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldEQ(FieldIsWinner, v))
}

// IsWinnerNEQ applies the NEQ predicate on the "is_winner" field.
func IsWinnerNEQ(v bool) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldNEQ(FieldIsWinner, v))
}

// RewardAmountEQ applies the EQ predicate on the "reward_amount" field.
func RewardAmountEQ(v float64) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldEQ(FieldRewardAmount, v))
}

// RewardAmountNEQ applies the NEQ predicate on the "reward_amount" field.
func RewardAmountNEQ(v float64) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldNEQ(FieldRewardAmount, v))
}

// RewardAmountIn applies the In predicate on the "reward_amount" field.
func RewardAmountIn(vs ...float64) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldIn(FieldRewardAmount, vs...))
}

// RewardAmountNotIn applies the NotIn predicate on the "reward_amount" field.
func RewardAmountNotIn(vs ...float64) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldNotIn(FieldRewardAmount, vs...))
}

// RewardAmountGT applies the GT predicate on the "reward_amount" field.
func RewardAmountGT(v float64) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldGT(FieldRewardAmount, v))
}

// RewardAmountGTE applies the GTE predicate on the "reward_amount" field.
func RewardAmountGTE(v float64) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldGTE(FieldRewardAmount, v))
}

// RewardAmountLT applies the LT predicate on the "reward_amount" field.
func RewardAmountLT(v float64) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldLT(FieldRewardAmount, v))
}

// RewardAmountLTE applies the LTE predicate on the "reward_amount" field.
func RewardAmountLTE(v float64) predicate.MatchResults {
	return predicate.MatchResults(sql.FieldLTE(FieldRewardAmount, v))
}

// RewardAmountIsNil applies the IsNil predicate on the "reward_amount" field.
func RewardAmountIsNil() predicate.MatchResults {
	return predicate.MatchResults(sql.FieldIsNull(FieldRewardAmount))
}

// RewardAmountNotNil applies the NotNil predicate on the "reward_amount" field.
func RewardAmountNotNil() predicate.MatchResults {
	return predicate.MatchResults(sql.FieldNotNull(FieldRewardAmount))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.MatchResults {
	return predicate.MatchResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.Users) predicate.MatchResults {
	return predicate.MatchResults(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMatch applies the HasEdge predicate on the "match" edge.
func HasMatch() predicate.MatchResults {
	return predicate.MatchResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MatchTable, MatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchWith applies the HasEdge predicate on the "match" edge with a given conditions (other predicates).
func HasMatchWith(preds ...predicate.Matches) predicate.MatchResults {
	return predicate.MatchResults(func(s *sql.Selector) {
		step := newMatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MatchResults) predicate.MatchResults {
	return predicate.MatchResults(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MatchResults) predicate.MatchResults {
	return predicate.MatchResults(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MatchResults) predicate.MatchResults {
	return predicate.MatchResults(sql.NotPredicates(p))
}
