// Code generated by ent, DO NOT EDIT.

package matchresults

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the matchresults type in the database.
	Label = "match_results"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKills holds the string denoting the kills field in the database.
	FieldKills = "kills"
	// FieldIsWinner holds the string denoting the is_winner field in the database.
	FieldIsWinner = "is_winner"
	// FieldRewardAmount holds the string denoting the reward_amount field in the database.
	FieldRewardAmount = "reward_amount"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeMatch holds the string denoting the match edge name in mutations.
	EdgeMatch = "match"
	// Table holds the table name of the matchresults in the database.
	Table = "match_results"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "match_results"
	// UserInverseTable is the table name for the Users entity.
	// It exists in this package in order to avoid circular dependency with the "users" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "users_match_results"
	// MatchTable is the table that holds the match relation/edge.
	MatchTable = "match_results"
	// MatchInverseTable is the table name for the Matches entity.
	// It exists in this package in order to avoid circular dependency with the "matches" package.
	MatchInverseTable = "matches"
	// MatchColumn is the table column denoting the match relation/edge.
	MatchColumn = "matches_match_results"
)

// Columns holds all SQL columns for matchresults fields.
var Columns = []string{
	FieldID,
	FieldKills,
	FieldIsWinner,
	FieldRewardAmount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "match_results"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"matches_match_results",
	"users_match_results",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultKills holds the default value on creation for the "kills" field.
	DefaultKills int
	// DefaultIsWinner holds the default value on creation for the "is_winner" field.
	DefaultIsWinner bool
)

// OrderOption defines the ordering options for the MatchResults queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKills orders the results by the kills field.
func ByKills(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKills, opts...).ToFunc()
}

// ByIsWinner orders the results by the is_winner field.
func ByIsWinner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsWinner, opts...).ToFunc()
}

// ByRewardAmount orders the results by the reward_amount field.
func ByRewardAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRewardAmount, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByMatchField orders the results by match field.
func ByMatchField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newMatchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MatchTable, MatchColumn),
	)
}
