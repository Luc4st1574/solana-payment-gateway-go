// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"bitsnake-server/internal/ent/migrate"

	"bitsnake-server/internal/ent/matches"
	"bitsnake-server/internal/ent/matchresults"
	"bitsnake-server/internal/ent/paymentverifications"
	"bitsnake-server/internal/ent/users"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// MatchResults is the client for interacting with the MatchResults builders.
	MatchResults *MatchResultsClient
	// Matches is the client for interacting with the Matches builders.
	Matches *MatchesClient
	// PaymentVerifications is the client for interacting with the PaymentVerifications builders.
	PaymentVerifications *PaymentVerificationsClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.MatchResults = NewMatchResultsClient(c.config)
	c.Matches = NewMatchesClient(c.config)
	c.PaymentVerifications = NewPaymentVerificationsClient(c.config)
	c.Users = NewUsersClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		MatchResults:         NewMatchResultsClient(cfg),
		Matches:              NewMatchesClient(cfg),
		PaymentVerifications: NewPaymentVerificationsClient(cfg),
		Users:                NewUsersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		MatchResults:         NewMatchResultsClient(cfg),
		Matches:              NewMatchesClient(cfg),
		PaymentVerifications: NewPaymentVerificationsClient(cfg),
		Users:                NewUsersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		MatchResults.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.MatchResults.Use(hooks...)
	c.Matches.Use(hooks...)
	c.PaymentVerifications.Use(hooks...)
	c.Users.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.MatchResults.Intercept(interceptors...)
	c.Matches.Intercept(interceptors...)
	c.PaymentVerifications.Intercept(interceptors...)
	c.Users.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MatchResultsMutation:
		return c.MatchResults.mutate(ctx, m)
	case *MatchesMutation:
		return c.Matches.mutate(ctx, m)
	case *PaymentVerificationsMutation:
		return c.PaymentVerifications.mutate(ctx, m)
	case *UsersMutation:
		return c.Users.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MatchResultsClient is a client for the MatchResults schema.
type MatchResultsClient struct {
	config
}

// NewMatchResultsClient returns a client for the MatchResults from the given config.
func NewMatchResultsClient(c config) *MatchResultsClient {
	return &MatchResultsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `matchresults.Hooks(f(g(h())))`.
func (c *MatchResultsClient) Use(hooks ...Hook) {
	c.hooks.MatchResults = append(c.hooks.MatchResults, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `matchresults.Intercept(f(g(h())))`.
func (c *MatchResultsClient) Intercept(interceptors ...Interceptor) {
	c.inters.MatchResults = append(c.inters.MatchResults, interceptors...)
}

// Create returns a builder for creating a MatchResults entity.
func (c *MatchResultsClient) Create() *MatchResultsCreate {
	mutation := newMatchResultsMutation(c.config, OpCreate)
	return &MatchResultsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MatchResults entities.
func (c *MatchResultsClient) CreateBulk(builders ...*MatchResultsCreate) *MatchResultsCreateBulk {
	return &MatchResultsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MatchResultsClient) MapCreateBulk(slice any, setFunc func(*MatchResultsCreate, int)) *MatchResultsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MatchResultsCreateBulk{err: fmt.Errorf("calling to MatchResultsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MatchResultsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MatchResultsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MatchResults.
func (c *MatchResultsClient) Update() *MatchResultsUpdate {
	mutation := newMatchResultsMutation(c.config, OpUpdate)
	return &MatchResultsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MatchResultsClient) UpdateOne(mr *MatchResults) *MatchResultsUpdateOne {
	mutation := newMatchResultsMutation(c.config, OpUpdateOne, withMatchResults(mr))
	return &MatchResultsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MatchResultsClient) UpdateOneID(id int) *MatchResultsUpdateOne {
	mutation := newMatchResultsMutation(c.config, OpUpdateOne, withMatchResultsID(id))
	return &MatchResultsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MatchResults.
func (c *MatchResultsClient) Delete() *MatchResultsDelete {
	mutation := newMatchResultsMutation(c.config, OpDelete)
	return &MatchResultsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MatchResultsClient) DeleteOne(mr *MatchResults) *MatchResultsDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MatchResultsClient) DeleteOneID(id int) *MatchResultsDeleteOne {
	builder := c.Delete().Where(matchresults.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MatchResultsDeleteOne{builder}
}

// Query returns a query builder for MatchResults.
func (c *MatchResultsClient) Query() *MatchResultsQuery {
	return &MatchResultsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMatchResults},
		inters: c.Interceptors(),
	}
}

// Get returns a MatchResults entity by its id.
func (c *MatchResultsClient) Get(ctx context.Context, id int) (*MatchResults, error) {
	return c.Query().Where(matchresults.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MatchResultsClient) GetX(ctx context.Context, id int) *MatchResults {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a MatchResults.
func (c *MatchResultsClient) QueryUser(mr *MatchResults) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(matchresults.Table, matchresults.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, matchresults.UserTable, matchresults.UserColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMatch queries the match edge of a MatchResults.
func (c *MatchResultsClient) QueryMatch(mr *MatchResults) *MatchesQuery {
	query := (&MatchesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(matchresults.Table, matchresults.FieldID, id),
			sqlgraph.To(matches.Table, matches.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, matchresults.MatchTable, matchresults.MatchColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MatchResultsClient) Hooks() []Hook {
	return c.hooks.MatchResults
}

// Interceptors returns the client interceptors.
func (c *MatchResultsClient) Interceptors() []Interceptor {
	return c.inters.MatchResults
}

func (c *MatchResultsClient) mutate(ctx context.Context, m *MatchResultsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MatchResultsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MatchResultsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MatchResultsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MatchResultsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MatchResults mutation op: %q", m.Op())
	}
}

// MatchesClient is a client for the Matches schema.
type MatchesClient struct {
	config
}

// NewMatchesClient returns a client for the Matches from the given config.
func NewMatchesClient(c config) *MatchesClient {
	return &MatchesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `matches.Hooks(f(g(h())))`.
func (c *MatchesClient) Use(hooks ...Hook) {
	c.hooks.Matches = append(c.hooks.Matches, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `matches.Intercept(f(g(h())))`.
func (c *MatchesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Matches = append(c.inters.Matches, interceptors...)
}

// Create returns a builder for creating a Matches entity.
func (c *MatchesClient) Create() *MatchesCreate {
	mutation := newMatchesMutation(c.config, OpCreate)
	return &MatchesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Matches entities.
func (c *MatchesClient) CreateBulk(builders ...*MatchesCreate) *MatchesCreateBulk {
	return &MatchesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MatchesClient) MapCreateBulk(slice any, setFunc func(*MatchesCreate, int)) *MatchesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MatchesCreateBulk{err: fmt.Errorf("calling to MatchesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MatchesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MatchesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Matches.
func (c *MatchesClient) Update() *MatchesUpdate {
	mutation := newMatchesMutation(c.config, OpUpdate)
	return &MatchesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MatchesClient) UpdateOne(m *Matches) *MatchesUpdateOne {
	mutation := newMatchesMutation(c.config, OpUpdateOne, withMatches(m))
	return &MatchesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MatchesClient) UpdateOneID(id int) *MatchesUpdateOne {
	mutation := newMatchesMutation(c.config, OpUpdateOne, withMatchesID(id))
	return &MatchesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Matches.
func (c *MatchesClient) Delete() *MatchesDelete {
	mutation := newMatchesMutation(c.config, OpDelete)
	return &MatchesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MatchesClient) DeleteOne(m *Matches) *MatchesDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MatchesClient) DeleteOneID(id int) *MatchesDeleteOne {
	builder := c.Delete().Where(matches.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MatchesDeleteOne{builder}
}

// Query returns a query builder for Matches.
func (c *MatchesClient) Query() *MatchesQuery {
	return &MatchesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMatches},
		inters: c.Interceptors(),
	}
}

// Get returns a Matches entity by its id.
func (c *MatchesClient) Get(ctx context.Context, id int) (*Matches, error) {
	return c.Query().Where(matches.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MatchesClient) GetX(ctx context.Context, id int) *Matches {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatchResults queries the match_results edge of a Matches.
func (c *MatchesClient) QueryMatchResults(m *Matches) *MatchResultsQuery {
	query := (&MatchResultsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(matches.Table, matches.FieldID, id),
			sqlgraph.To(matchresults.Table, matchresults.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, matches.MatchResultsTable, matches.MatchResultsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Matches.
func (c *MatchesClient) QueryUser(m *Matches) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(matches.Table, matches.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, matches.UserTable, matches.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MatchesClient) Hooks() []Hook {
	return c.hooks.Matches
}

// Interceptors returns the client interceptors.
func (c *MatchesClient) Interceptors() []Interceptor {
	return c.inters.Matches
}

func (c *MatchesClient) mutate(ctx context.Context, m *MatchesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MatchesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MatchesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MatchesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MatchesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Matches mutation op: %q", m.Op())
	}
}

// PaymentVerificationsClient is a client for the PaymentVerifications schema.
type PaymentVerificationsClient struct {
	config
}

// NewPaymentVerificationsClient returns a client for the PaymentVerifications from the given config.
func NewPaymentVerificationsClient(c config) *PaymentVerificationsClient {
	return &PaymentVerificationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentverifications.Hooks(f(g(h())))`.
func (c *PaymentVerificationsClient) Use(hooks ...Hook) {
	c.hooks.PaymentVerifications = append(c.hooks.PaymentVerifications, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentverifications.Intercept(f(g(h())))`.
func (c *PaymentVerificationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentVerifications = append(c.inters.PaymentVerifications, interceptors...)
}

// Create returns a builder for creating a PaymentVerifications entity.
func (c *PaymentVerificationsClient) Create() *PaymentVerificationsCreate {
	mutation := newPaymentVerificationsMutation(c.config, OpCreate)
	return &PaymentVerificationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentVerifications entities.
func (c *PaymentVerificationsClient) CreateBulk(builders ...*PaymentVerificationsCreate) *PaymentVerificationsCreateBulk {
	return &PaymentVerificationsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentVerificationsClient) MapCreateBulk(slice any, setFunc func(*PaymentVerificationsCreate, int)) *PaymentVerificationsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentVerificationsCreateBulk{err: fmt.Errorf("calling to PaymentVerificationsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentVerificationsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentVerificationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentVerifications.
func (c *PaymentVerificationsClient) Update() *PaymentVerificationsUpdate {
	mutation := newPaymentVerificationsMutation(c.config, OpUpdate)
	return &PaymentVerificationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentVerificationsClient) UpdateOne(pv *PaymentVerifications) *PaymentVerificationsUpdateOne {
	mutation := newPaymentVerificationsMutation(c.config, OpUpdateOne, withPaymentVerifications(pv))
	return &PaymentVerificationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentVerificationsClient) UpdateOneID(id int) *PaymentVerificationsUpdateOne {
	mutation := newPaymentVerificationsMutation(c.config, OpUpdateOne, withPaymentVerificationsID(id))
	return &PaymentVerificationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentVerifications.
func (c *PaymentVerificationsClient) Delete() *PaymentVerificationsDelete {
	mutation := newPaymentVerificationsMutation(c.config, OpDelete)
	return &PaymentVerificationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentVerificationsClient) DeleteOne(pv *PaymentVerifications) *PaymentVerificationsDeleteOne {
	return c.DeleteOneID(pv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentVerificationsClient) DeleteOneID(id int) *PaymentVerificationsDeleteOne {
	builder := c.Delete().Where(paymentverifications.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentVerificationsDeleteOne{builder}
}

// Query returns a query builder for PaymentVerifications.
func (c *PaymentVerificationsClient) Query() *PaymentVerificationsQuery {
	return &PaymentVerificationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentVerifications},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentVerifications entity by its id.
func (c *PaymentVerificationsClient) Get(ctx context.Context, id int) (*PaymentVerifications, error) {
	return c.Query().Where(paymentverifications.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentVerificationsClient) GetX(ctx context.Context, id int) *PaymentVerifications {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PaymentVerifications.
func (c *PaymentVerificationsClient) QueryUser(pv *PaymentVerifications) *UsersQuery {
	query := (&UsersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentverifications.Table, paymentverifications.FieldID, id),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentverifications.UserTable, paymentverifications.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentVerificationsClient) Hooks() []Hook {
	return c.hooks.PaymentVerifications
}

// Interceptors returns the client interceptors.
func (c *PaymentVerificationsClient) Interceptors() []Interceptor {
	return c.inters.PaymentVerifications
}

func (c *PaymentVerificationsClient) mutate(ctx context.Context, m *PaymentVerificationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentVerificationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentVerificationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentVerificationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentVerificationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentVerifications mutation op: %q", m.Op())
	}
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `users.Hooks(f(g(h())))`.
func (c *UsersClient) Use(hooks ...Hook) {
	c.hooks.Users = append(c.hooks.Users, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `users.Intercept(f(g(h())))`.
func (c *UsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Users = append(c.inters.Users, interceptors...)
}

// Create returns a builder for creating a Users entity.
func (c *UsersClient) Create() *UsersCreate {
	mutation := newUsersMutation(c.config, OpCreate)
	return &UsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Users entities.
func (c *UsersClient) CreateBulk(builders ...*UsersCreate) *UsersCreateBulk {
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsersClient) MapCreateBulk(slice any, setFunc func(*UsersCreate, int)) *UsersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsersCreateBulk{err: fmt.Errorf("calling to UsersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	mutation := newUsersMutation(c.config, OpUpdate)
	return &UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsers(u))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id int) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsersID(id))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	mutation := newUsersMutation(c.config, OpDelete)
	return &UsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsersClient) DeleteOneID(id int) *UsersDeleteOne {
	builder := c.Delete().Where(users.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersDeleteOne{builder}
}

// Query returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsers},
		inters: c.Interceptors(),
	}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id int) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id int) *Users {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatches queries the matches edge of a Users.
func (c *UsersClient) QueryMatches(u *Users) *MatchesQuery {
	query := (&MatchesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(matches.Table, matches.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.MatchesTable, users.MatchesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMatchResults queries the match_results edge of a Users.
func (c *UsersClient) QueryMatchResults(u *Users) *MatchResultsQuery {
	query := (&MatchResultsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(matchresults.Table, matchresults.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.MatchResultsTable, users.MatchResultsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayments queries the payments edge of a Users.
func (c *UsersClient) QueryPayments(u *Users) *PaymentVerificationsQuery {
	query := (&PaymentVerificationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(users.Table, users.FieldID, id),
			sqlgraph.To(paymentverifications.Table, paymentverifications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, users.PaymentsTable, users.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsersClient) Hooks() []Hook {
	return c.hooks.Users
}

// Interceptors returns the client interceptors.
func (c *UsersClient) Interceptors() []Interceptor {
	return c.inters.Users
}

func (c *UsersClient) mutate(ctx context.Context, m *UsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Users mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		MatchResults, Matches, PaymentVerifications, Users []ent.Hook
	}
	inters struct {
		MatchResults, Matches, PaymentVerifications, Users []ent.Interceptor
	}
)
