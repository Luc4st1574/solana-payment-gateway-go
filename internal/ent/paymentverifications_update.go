// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/paymentverifications"
	"bitsnake-server/internal/ent/predicate"
	"bitsnake-server/internal/ent/users"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentVerificationsUpdate is the builder for updating PaymentVerifications entities.
type PaymentVerificationsUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentVerificationsMutation
}

// Where appends a list predicates to the PaymentVerificationsUpdate builder.
func (pvu *PaymentVerificationsUpdate) Where(ps ...predicate.PaymentVerifications) *PaymentVerificationsUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetUserID sets the "user_id" field.
func (pvu *PaymentVerificationsUpdate) SetUserID(i int) *PaymentVerificationsUpdate {
	pvu.mutation.SetUserID(i)
	return pvu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pvu *PaymentVerificationsUpdate) SetNillableUserID(i *int) *PaymentVerificationsUpdate {
	if i != nil {
		pvu.SetUserID(*i)
	}
	return pvu
}

// SetWalletAddress sets the "wallet_address" field.
func (pvu *PaymentVerificationsUpdate) SetWalletAddress(s string) *PaymentVerificationsUpdate {
	pvu.mutation.SetWalletAddress(s)
	return pvu
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (pvu *PaymentVerificationsUpdate) SetNillableWalletAddress(s *string) *PaymentVerificationsUpdate {
	if s != nil {
		pvu.SetWalletAddress(*s)
	}
	return pvu
}

// SetAmount sets the "amount" field.
func (pvu *PaymentVerificationsUpdate) SetAmount(f float64) *PaymentVerificationsUpdate {
	pvu.mutation.ResetAmount()
	pvu.mutation.SetAmount(f)
	return pvu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pvu *PaymentVerificationsUpdate) SetNillableAmount(f *float64) *PaymentVerificationsUpdate {
	if f != nil {
		pvu.SetAmount(*f)
	}
	return pvu
}

// AddAmount adds f to the "amount" field.
func (pvu *PaymentVerificationsUpdate) AddAmount(f float64) *PaymentVerificationsUpdate {
	pvu.mutation.AddAmount(f)
	return pvu
}

// SetTransactionHash sets the "transaction_hash" field.
func (pvu *PaymentVerificationsUpdate) SetTransactionHash(s string) *PaymentVerificationsUpdate {
	pvu.mutation.SetTransactionHash(s)
	return pvu
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (pvu *PaymentVerificationsUpdate) SetNillableTransactionHash(s *string) *PaymentVerificationsUpdate {
	if s != nil {
		pvu.SetTransactionHash(*s)
	}
	return pvu
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (pvu *PaymentVerificationsUpdate) ClearTransactionHash() *PaymentVerificationsUpdate {
	pvu.mutation.ClearTransactionHash()
	return pvu
}

// SetStatus sets the "status" field.
func (pvu *PaymentVerificationsUpdate) SetStatus(pa paymentverifications.Status) *PaymentVerificationsUpdate {
	pvu.mutation.SetStatus(pa)
	return pvu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pvu *PaymentVerificationsUpdate) SetNillableStatus(pa *paymentverifications.Status) *PaymentVerificationsUpdate {
	if pa != nil {
		pvu.SetStatus(*pa)
	}
	return pvu
}

// SetAccessGranted sets the "access_granted" field.
func (pvu *PaymentVerificationsUpdate) SetAccessGranted(b bool) *PaymentVerificationsUpdate {
	pvu.mutation.SetAccessGranted(b)
	return pvu
}

// SetNillableAccessGranted sets the "access_granted" field if the given value is not nil.
func (pvu *PaymentVerificationsUpdate) SetNillableAccessGranted(b *bool) *PaymentVerificationsUpdate {
	if b != nil {
		pvu.SetAccessGranted(*b)
	}
	return pvu
}

// SetUser sets the "user" edge to the Users entity.
func (pvu *PaymentVerificationsUpdate) SetUser(u *Users) *PaymentVerificationsUpdate {
	return pvu.SetUserID(u.ID)
}

// Mutation returns the PaymentVerificationsMutation object of the builder.
func (pvu *PaymentVerificationsUpdate) Mutation() *PaymentVerificationsMutation {
	return pvu.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (pvu *PaymentVerificationsUpdate) ClearUser() *PaymentVerificationsUpdate {
	pvu.mutation.ClearUser()
	return pvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *PaymentVerificationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pvu.sqlSave, pvu.mutation, pvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *PaymentVerificationsUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *PaymentVerificationsUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *PaymentVerificationsUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvu *PaymentVerificationsUpdate) check() error {
	if v, ok := pvu.mutation.WalletAddress(); ok {
		if err := paymentverifications.WalletAddressValidator(v); err != nil {
			return &ValidationError{Name: "wallet_address", err: fmt.Errorf(`ent: validator failed for field "PaymentVerifications.wallet_address": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.TransactionHash(); ok {
		if err := paymentverifications.TransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "transaction_hash", err: fmt.Errorf(`ent: validator failed for field "PaymentVerifications.transaction_hash": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.Status(); ok {
		if err := paymentverifications.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PaymentVerifications.status": %w`, err)}
		}
	}
	if pvu.mutation.UserCleared() && len(pvu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentVerifications.user"`)
	}
	return nil
}

func (pvu *PaymentVerificationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentverifications.Table, paymentverifications.Columns, sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt))
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.WalletAddress(); ok {
		_spec.SetField(paymentverifications.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := pvu.mutation.Amount(); ok {
		_spec.SetField(paymentverifications.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pvu.mutation.AddedAmount(); ok {
		_spec.AddField(paymentverifications.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pvu.mutation.TransactionHash(); ok {
		_spec.SetField(paymentverifications.FieldTransactionHash, field.TypeString, value)
	}
	if pvu.mutation.TransactionHashCleared() {
		_spec.ClearField(paymentverifications.FieldTransactionHash, field.TypeString)
	}
	if value, ok := pvu.mutation.Status(); ok {
		_spec.SetField(paymentverifications.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pvu.mutation.AccessGranted(); ok {
		_spec.SetField(paymentverifications.FieldAccessGranted, field.TypeBool, value)
	}
	if pvu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentverifications.UserTable,
			Columns: []string{paymentverifications.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentverifications.UserTable,
			Columns: []string{paymentverifications.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentverifications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pvu.mutation.done = true
	return n, nil
}

// PaymentVerificationsUpdateOne is the builder for updating a single PaymentVerifications entity.
type PaymentVerificationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentVerificationsMutation
}

// SetUserID sets the "user_id" field.
func (pvuo *PaymentVerificationsUpdateOne) SetUserID(i int) *PaymentVerificationsUpdateOne {
	pvuo.mutation.SetUserID(i)
	return pvuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pvuo *PaymentVerificationsUpdateOne) SetNillableUserID(i *int) *PaymentVerificationsUpdateOne {
	if i != nil {
		pvuo.SetUserID(*i)
	}
	return pvuo
}

// SetWalletAddress sets the "wallet_address" field.
func (pvuo *PaymentVerificationsUpdateOne) SetWalletAddress(s string) *PaymentVerificationsUpdateOne {
	pvuo.mutation.SetWalletAddress(s)
	return pvuo
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (pvuo *PaymentVerificationsUpdateOne) SetNillableWalletAddress(s *string) *PaymentVerificationsUpdateOne {
	if s != nil {
		pvuo.SetWalletAddress(*s)
	}
	return pvuo
}

// SetAmount sets the "amount" field.
func (pvuo *PaymentVerificationsUpdateOne) SetAmount(f float64) *PaymentVerificationsUpdateOne {
	pvuo.mutation.ResetAmount()
	pvuo.mutation.SetAmount(f)
	return pvuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pvuo *PaymentVerificationsUpdateOne) SetNillableAmount(f *float64) *PaymentVerificationsUpdateOne {
	if f != nil {
		pvuo.SetAmount(*f)
	}
	return pvuo
}

// AddAmount adds f to the "amount" field.
func (pvuo *PaymentVerificationsUpdateOne) AddAmount(f float64) *PaymentVerificationsUpdateOne {
	pvuo.mutation.AddAmount(f)
	return pvuo
}

// SetTransactionHash sets the "transaction_hash" field.
func (pvuo *PaymentVerificationsUpdateOne) SetTransactionHash(s string) *PaymentVerificationsUpdateOne {
	pvuo.mutation.SetTransactionHash(s)
	return pvuo
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (pvuo *PaymentVerificationsUpdateOne) SetNillableTransactionHash(s *string) *PaymentVerificationsUpdateOne {
	if s != nil {
		pvuo.SetTransactionHash(*s)
	}
	return pvuo
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (pvuo *PaymentVerificationsUpdateOne) ClearTransactionHash() *PaymentVerificationsUpdateOne {
	pvuo.mutation.ClearTransactionHash()
	return pvuo
}

// SetStatus sets the "status" field.
func (pvuo *PaymentVerificationsUpdateOne) SetStatus(pa paymentverifications.Status) *PaymentVerificationsUpdateOne {
	pvuo.mutation.SetStatus(pa)
	return pvuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pvuo *PaymentVerificationsUpdateOne) SetNillableStatus(pa *paymentverifications.Status) *PaymentVerificationsUpdateOne {
	if pa != nil {
		pvuo.SetStatus(*pa)
	}
	return pvuo
}

// SetAccessGranted sets the "access_granted" field.
func (pvuo *PaymentVerificationsUpdateOne) SetAccessGranted(b bool) *PaymentVerificationsUpdateOne {
	pvuo.mutation.SetAccessGranted(b)
	return pvuo
}

// SetNillableAccessGranted sets the "access_granted" field if the given value is not nil.
func (pvuo *PaymentVerificationsUpdateOne) SetNillableAccessGranted(b *bool) *PaymentVerificationsUpdateOne {
	if b != nil {
		pvuo.SetAccessGranted(*b)
	}
	return pvuo
}

// SetUser sets the "user" edge to the Users entity.
func (pvuo *PaymentVerificationsUpdateOne) SetUser(u *Users) *PaymentVerificationsUpdateOne {
	return pvuo.SetUserID(u.ID)
}

// Mutation returns the PaymentVerificationsMutation object of the builder.
func (pvuo *PaymentVerificationsUpdateOne) Mutation() *PaymentVerificationsMutation {
	return pvuo.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (pvuo *PaymentVerificationsUpdateOne) ClearUser() *PaymentVerificationsUpdateOne {
	pvuo.mutation.ClearUser()
	return pvuo
}

// Where appends a list predicates to the PaymentVerificationsUpdate builder.
func (pvuo *PaymentVerificationsUpdateOne) Where(ps ...predicate.PaymentVerifications) *PaymentVerificationsUpdateOne {
	pvuo.mutation.Where(ps...)
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *PaymentVerificationsUpdateOne) Select(field string, fields ...string) *PaymentVerificationsUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated PaymentVerifications entity.
func (pvuo *PaymentVerificationsUpdateOne) Save(ctx context.Context) (*PaymentVerifications, error) {
	return withHooks(ctx, pvuo.sqlSave, pvuo.mutation, pvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *PaymentVerificationsUpdateOne) SaveX(ctx context.Context) *PaymentVerifications {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *PaymentVerificationsUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *PaymentVerificationsUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *PaymentVerificationsUpdateOne) check() error {
	if v, ok := pvuo.mutation.WalletAddress(); ok {
		if err := paymentverifications.WalletAddressValidator(v); err != nil {
			return &ValidationError{Name: "wallet_address", err: fmt.Errorf(`ent: validator failed for field "PaymentVerifications.wallet_address": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.TransactionHash(); ok {
		if err := paymentverifications.TransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "transaction_hash", err: fmt.Errorf(`ent: validator failed for field "PaymentVerifications.transaction_hash": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.Status(); ok {
		if err := paymentverifications.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PaymentVerifications.status": %w`, err)}
		}
	}
	if pvuo.mutation.UserCleared() && len(pvuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentVerifications.user"`)
	}
	return nil
}

func (pvuo *PaymentVerificationsUpdateOne) sqlSave(ctx context.Context) (_node *PaymentVerifications, err error) {
	if err := pvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentverifications.Table, paymentverifications.Columns, sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt))
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentVerifications.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentverifications.FieldID)
		for _, f := range fields {
			if !paymentverifications.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentverifications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.WalletAddress(); ok {
		_spec.SetField(paymentverifications.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.Amount(); ok {
		_spec.SetField(paymentverifications.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pvuo.mutation.AddedAmount(); ok {
		_spec.AddField(paymentverifications.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pvuo.mutation.TransactionHash(); ok {
		_spec.SetField(paymentverifications.FieldTransactionHash, field.TypeString, value)
	}
	if pvuo.mutation.TransactionHashCleared() {
		_spec.ClearField(paymentverifications.FieldTransactionHash, field.TypeString)
	}
	if value, ok := pvuo.mutation.Status(); ok {
		_spec.SetField(paymentverifications.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pvuo.mutation.AccessGranted(); ok {
		_spec.SetField(paymentverifications.FieldAccessGranted, field.TypeBool, value)
	}
	if pvuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentverifications.UserTable,
			Columns: []string{paymentverifications.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentverifications.UserTable,
			Columns: []string{paymentverifications.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentVerifications{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentverifications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pvuo.mutation.done = true
	return _node, nil
}
