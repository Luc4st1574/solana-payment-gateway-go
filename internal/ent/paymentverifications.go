// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/paymentverifications"
	"bitsnake-server/internal/ent/users"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaymentVerifications is the model entity for the PaymentVerifications schema.
type PaymentVerifications struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Foreign key to the user who made the payment
	UserID int `json:"user_id,omitempty"`
	// Wallet address where payment was received
	WalletAddress string `json:"wallet_address,omitempty"`
	// Amount received in SOL
	Amount float64 `json:"amount,omitempty"`
	// Transaction hash from Solana blockchain
	TransactionHash string `json:"transaction_hash,omitempty"`
	// Current verification status
	Status paymentverifications.Status `json:"status,omitempty"`
	// Whether access was granted after verification
	AccessGranted bool `json:"access_granted,omitempty"`
	// Timestamp when the record was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentVerificationsQuery when eager-loading is set.
	Edges        PaymentVerificationsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentVerificationsEdges holds the relations/edges for other nodes in the graph.
type PaymentVerificationsEdges struct {
	// User who made the payment
	User *Users `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentVerificationsEdges) UserOrErr() (*Users, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentVerifications) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentverifications.FieldAccessGranted:
			values[i] = new(sql.NullBool)
		case paymentverifications.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case paymentverifications.FieldID, paymentverifications.FieldUserID:
			values[i] = new(sql.NullInt64)
		case paymentverifications.FieldWalletAddress, paymentverifications.FieldTransactionHash, paymentverifications.FieldStatus:
			values[i] = new(sql.NullString)
		case paymentverifications.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentVerifications fields.
func (pv *PaymentVerifications) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentverifications.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pv.ID = int(value.Int64)
		case paymentverifications.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pv.UserID = int(value.Int64)
			}
		case paymentverifications.FieldWalletAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_address", values[i])
			} else if value.Valid {
				pv.WalletAddress = value.String
			}
		case paymentverifications.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pv.Amount = float64(value.Float64)
			}
		case paymentverifications.FieldTransactionHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_hash", values[i])
			} else if value.Valid {
				pv.TransactionHash = value.String
			}
		case paymentverifications.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pv.Status = paymentverifications.Status(value.String)
			}
		case paymentverifications.FieldAccessGranted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field access_granted", values[i])
			} else if value.Valid {
				pv.AccessGranted = value.Bool
			}
		case paymentverifications.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pv.CreatedAt = value.Time
			}
		default:
			pv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentVerifications.
// This includes values selected through modifiers, order, etc.
func (pv *PaymentVerifications) Value(name string) (ent.Value, error) {
	return pv.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PaymentVerifications entity.
func (pv *PaymentVerifications) QueryUser() *UsersQuery {
	return NewPaymentVerificationsClient(pv.config).QueryUser(pv)
}

// Update returns a builder for updating this PaymentVerifications.
// Note that you need to call PaymentVerifications.Unwrap() before calling this method if this PaymentVerifications
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *PaymentVerifications) Update() *PaymentVerificationsUpdateOne {
	return NewPaymentVerificationsClient(pv.config).UpdateOne(pv)
}

// Unwrap unwraps the PaymentVerifications entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pv *PaymentVerifications) Unwrap() *PaymentVerifications {
	_tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentVerifications is not a transactional entity")
	}
	pv.config.driver = _tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *PaymentVerifications) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentVerifications(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pv.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pv.UserID))
	builder.WriteString(", ")
	builder.WriteString("wallet_address=")
	builder.WriteString(pv.WalletAddress)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pv.Amount))
	builder.WriteString(", ")
	builder.WriteString("transaction_hash=")
	builder.WriteString(pv.TransactionHash)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pv.Status))
	builder.WriteString(", ")
	builder.WriteString("access_granted=")
	builder.WriteString(fmt.Sprintf("%v", pv.AccessGranted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pv.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentVerificationsSlice is a parsable slice of PaymentVerifications.
type PaymentVerificationsSlice []*PaymentVerifications
