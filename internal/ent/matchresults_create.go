// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/matches"
	"bitsnake-server/internal/ent/matchresults"
	"bitsnake-server/internal/ent/users"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchResultsCreate is the builder for creating a MatchResults entity.
type MatchResultsCreate struct {
	config
	mutation *MatchResultsMutation
	hooks    []Hook
}

// SetKills sets the "kills" field.
func (mrc *MatchResultsCreate) SetKills(i int) *MatchResultsCreate {
	mrc.mutation.SetKills(i)
	return mrc
}

// SetNillableKills sets the "kills" field if the given value is not nil.
func (mrc *MatchResultsCreate) SetNillableKills(i *int) *MatchResultsCreate {
	if i != nil {
		mrc.SetKills(*i)
	}
	return mrc
}

// SetIsWinner sets the "is_winner" field.
func (mrc *MatchResultsCreate) SetIsWinner(b bool) *MatchResultsCreate {
	mrc.mutation.SetIsWinner(b)
	return mrc
}

// SetNillableIsWinner sets the "is_winner" field if the given value is not nil.
func (mrc *MatchResultsCreate) SetNillableIsWinner(b *bool) *MatchResultsCreate {
	if b != nil {
		mrc.SetIsWinner(*b)
	}
	return mrc
}

// SetRewardAmount sets the "reward_amount" field.
func (mrc *MatchResultsCreate) SetRewardAmount(f float64) *MatchResultsCreate {
	mrc.mutation.SetRewardAmount(f)
	return mrc
}

// SetNillableRewardAmount sets the "reward_amount" field if the given value is not nil.
func (mrc *MatchResultsCreate) SetNillableRewardAmount(f *float64) *MatchResultsCreate {
	if f != nil {
		mrc.SetRewardAmount(*f)
	}
	return mrc
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (mrc *MatchResultsCreate) SetUserID(id int) *MatchResultsCreate {
	mrc.mutation.SetUserID(id)
	return mrc
}

// SetUser sets the "user" edge to the Users entity.
func (mrc *MatchResultsCreate) SetUser(u *Users) *MatchResultsCreate {
	return mrc.SetUserID(u.ID)
}

// SetMatchID sets the "match" edge to the Matches entity by ID.
func (mrc *MatchResultsCreate) SetMatchID(id int) *MatchResultsCreate {
	mrc.mutation.SetMatchID(id)
	return mrc
}

// SetMatch sets the "match" edge to the Matches entity.
func (mrc *MatchResultsCreate) SetMatch(m *Matches) *MatchResultsCreate {
	return mrc.SetMatchID(m.ID)
}

// Mutation returns the MatchResultsMutation object of the builder.
func (mrc *MatchResultsCreate) Mutation() *MatchResultsMutation {
	return mrc.mutation
}

// Save creates the MatchResults in the database.
func (mrc *MatchResultsCreate) Save(ctx context.Context) (*MatchResults, error) {
	mrc.defaults()
	return withHooks(ctx, mrc.sqlSave, mrc.mutation, mrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *MatchResultsCreate) SaveX(ctx context.Context) *MatchResults {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrc *MatchResultsCreate) Exec(ctx context.Context) error {
	_, err := mrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrc *MatchResultsCreate) ExecX(ctx context.Context) {
	if err := mrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrc *MatchResultsCreate) defaults() {
	if _, ok := mrc.mutation.Kills(); !ok {
		v := matchresults.DefaultKills
		mrc.mutation.SetKills(v)
	}
	if _, ok := mrc.mutation.IsWinner(); !ok {
		v := matchresults.DefaultIsWinner
		mrc.mutation.SetIsWinner(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrc *MatchResultsCreate) check() error {
	if _, ok := mrc.mutation.Kills(); !ok {
		return &ValidationError{Name: "kills", err: errors.New(`ent: missing required field "MatchResults.kills"`)}
	}
	if _, ok := mrc.mutation.IsWinner(); !ok {
		return &ValidationError{Name: "is_winner", err: errors.New(`ent: missing required field "MatchResults.is_winner"`)}
	}
	if len(mrc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "MatchResults.user"`)}
	}
	if len(mrc.mutation.MatchIDs()) == 0 {
		return &ValidationError{Name: "match", err: errors.New(`ent: missing required edge "MatchResults.match"`)}
	}
	return nil
}

func (mrc *MatchResultsCreate) sqlSave(ctx context.Context) (*MatchResults, error) {
	if err := mrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mrc.mutation.id = &_node.ID
	mrc.mutation.done = true
	return _node, nil
}

func (mrc *MatchResultsCreate) createSpec() (*MatchResults, *sqlgraph.CreateSpec) {
	var (
		_node = &MatchResults{config: mrc.config}
		_spec = sqlgraph.NewCreateSpec(matchresults.Table, sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt))
	)
	if value, ok := mrc.mutation.Kills(); ok {
		_spec.SetField(matchresults.FieldKills, field.TypeInt, value)
		_node.Kills = value
	}
	if value, ok := mrc.mutation.IsWinner(); ok {
		_spec.SetField(matchresults.FieldIsWinner, field.TypeBool, value)
		_node.IsWinner = value
	}
	if value, ok := mrc.mutation.RewardAmount(); ok {
		_spec.SetField(matchresults.FieldRewardAmount, field.TypeFloat64, value)
		_node.RewardAmount = &value
	}
	if nodes := mrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.UserTable,
			Columns: []string{matchresults.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.users_match_results = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mrc.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.MatchTable,
			Columns: []string{matchresults.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.matches_match_results = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MatchResultsCreateBulk is the builder for creating many MatchResults entities in bulk.
type MatchResultsCreateBulk struct {
	config
	err      error
	builders []*MatchResultsCreate
}

// Save creates the MatchResults entities in the database.
func (mrcb *MatchResultsCreateBulk) Save(ctx context.Context) ([]*MatchResults, error) {
	if mrcb.err != nil {
		return nil, mrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*MatchResults, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchResultsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *MatchResultsCreateBulk) SaveX(ctx context.Context) []*MatchResults {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrcb *MatchResultsCreateBulk) Exec(ctx context.Context) error {
	_, err := mrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrcb *MatchResultsCreateBulk) ExecX(ctx context.Context) {
	if err := mrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
