// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/matches"
	"bitsnake-server/internal/ent/matchresults"
	"bitsnake-server/internal/ent/predicate"
	"bitsnake-server/internal/ent/users"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchesUpdate is the builder for updating Matches entities.
type MatchesUpdate struct {
	config
	hooks    []Hook
	mutation *MatchesMutation
}

// Where appends a list predicates to the MatchesUpdate builder.
func (mu *MatchesUpdate) Where(ps ...predicate.Matches) *MatchesUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetGameHashID sets the "game_hash_id" field.
func (mu *MatchesUpdate) SetGameHashID(s string) *MatchesUpdate {
	mu.mutation.SetGameHashID(s)
	return mu
}

// SetNillableGameHashID sets the "game_hash_id" field if the given value is not nil.
func (mu *MatchesUpdate) SetNillableGameHashID(s *string) *MatchesUpdate {
	if s != nil {
		mu.SetGameHashID(*s)
	}
	return mu
}

// SetExpirationDate sets the "expiration_date" field.
func (mu *MatchesUpdate) SetExpirationDate(t time.Time) *MatchesUpdate {
	mu.mutation.SetExpirationDate(t)
	return mu
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (mu *MatchesUpdate) SetNillableExpirationDate(t *time.Time) *MatchesUpdate {
	if t != nil {
		mu.SetExpirationDate(*t)
	}
	return mu
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (mu *MatchesUpdate) ClearExpirationDate() *MatchesUpdate {
	mu.mutation.ClearExpirationDate()
	return mu
}

// SetWalletAddress sets the "wallet_address" field.
func (mu *MatchesUpdate) SetWalletAddress(s string) *MatchesUpdate {
	mu.mutation.SetWalletAddress(s)
	return mu
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (mu *MatchesUpdate) SetNillableWalletAddress(s *string) *MatchesUpdate {
	if s != nil {
		mu.SetWalletAddress(*s)
	}
	return mu
}

// SetTransactionHash sets the "transaction_hash" field.
func (mu *MatchesUpdate) SetTransactionHash(s string) *MatchesUpdate {
	mu.mutation.SetTransactionHash(s)
	return mu
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (mu *MatchesUpdate) SetNillableTransactionHash(s *string) *MatchesUpdate {
	if s != nil {
		mu.SetTransactionHash(*s)
	}
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MatchesUpdate) SetCreatedAt(t time.Time) *MatchesUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MatchesUpdate) SetNillableCreatedAt(t *time.Time) *MatchesUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// AddMatchResultIDs adds the "match_results" edge to the MatchResults entity by IDs.
func (mu *MatchesUpdate) AddMatchResultIDs(ids ...int) *MatchesUpdate {
	mu.mutation.AddMatchResultIDs(ids...)
	return mu
}

// AddMatchResults adds the "match_results" edges to the MatchResults entity.
func (mu *MatchesUpdate) AddMatchResults(m ...*MatchResults) *MatchesUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMatchResultIDs(ids...)
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (mu *MatchesUpdate) SetUserID(id int) *MatchesUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetUser sets the "user" edge to the Users entity.
func (mu *MatchesUpdate) SetUser(u *Users) *MatchesUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MatchesMutation object of the builder.
func (mu *MatchesUpdate) Mutation() *MatchesMutation {
	return mu.mutation
}

// ClearMatchResults clears all "match_results" edges to the MatchResults entity.
func (mu *MatchesUpdate) ClearMatchResults() *MatchesUpdate {
	mu.mutation.ClearMatchResults()
	return mu
}

// RemoveMatchResultIDs removes the "match_results" edge to MatchResults entities by IDs.
func (mu *MatchesUpdate) RemoveMatchResultIDs(ids ...int) *MatchesUpdate {
	mu.mutation.RemoveMatchResultIDs(ids...)
	return mu
}

// RemoveMatchResults removes "match_results" edges to MatchResults entities.
func (mu *MatchesUpdate) RemoveMatchResults(m ...*MatchResults) *MatchesUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMatchResultIDs(ids...)
}

// ClearUser clears the "user" edge to the Users entity.
func (mu *MatchesUpdate) ClearUser() *MatchesUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MatchesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MatchesUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MatchesUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MatchesUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MatchesUpdate) check() error {
	if v, ok := mu.mutation.GameHashID(); ok {
		if err := matches.GameHashIDValidator(v); err != nil {
			return &ValidationError{Name: "game_hash_id", err: fmt.Errorf(`ent: validator failed for field "Matches.game_hash_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.WalletAddress(); ok {
		if err := matches.WalletAddressValidator(v); err != nil {
			return &ValidationError{Name: "wallet_address", err: fmt.Errorf(`ent: validator failed for field "Matches.wallet_address": %w`, err)}
		}
	}
	if v, ok := mu.mutation.TransactionHash(); ok {
		if err := matches.TransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "transaction_hash", err: fmt.Errorf(`ent: validator failed for field "Matches.transaction_hash": %w`, err)}
		}
	}
	if mu.mutation.UserCleared() && len(mu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Matches.user"`)
	}
	return nil
}

func (mu *MatchesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(matches.Table, matches.Columns, sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.GameHashID(); ok {
		_spec.SetField(matches.FieldGameHashID, field.TypeString, value)
	}
	if value, ok := mu.mutation.ExpirationDate(); ok {
		_spec.SetField(matches.FieldExpirationDate, field.TypeTime, value)
	}
	if mu.mutation.ExpirationDateCleared() {
		_spec.ClearField(matches.FieldExpirationDate, field.TypeTime)
	}
	if value, ok := mu.mutation.WalletAddress(); ok {
		_spec.SetField(matches.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := mu.mutation.TransactionHash(); ok {
		_spec.SetField(matches.FieldTransactionHash, field.TypeString, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(matches.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.MatchResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   matches.MatchResultsTable,
			Columns: []string{matches.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMatchResultsIDs(); len(nodes) > 0 && !mu.mutation.MatchResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   matches.MatchResultsTable,
			Columns: []string{matches.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MatchResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   matches.MatchResultsTable,
			Columns: []string{matches.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matches.UserTable,
			Columns: []string{matches.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matches.UserTable,
			Columns: []string{matches.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matches.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MatchesUpdateOne is the builder for updating a single Matches entity.
type MatchesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchesMutation
}

// SetGameHashID sets the "game_hash_id" field.
func (muo *MatchesUpdateOne) SetGameHashID(s string) *MatchesUpdateOne {
	muo.mutation.SetGameHashID(s)
	return muo
}

// SetNillableGameHashID sets the "game_hash_id" field if the given value is not nil.
func (muo *MatchesUpdateOne) SetNillableGameHashID(s *string) *MatchesUpdateOne {
	if s != nil {
		muo.SetGameHashID(*s)
	}
	return muo
}

// SetExpirationDate sets the "expiration_date" field.
func (muo *MatchesUpdateOne) SetExpirationDate(t time.Time) *MatchesUpdateOne {
	muo.mutation.SetExpirationDate(t)
	return muo
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (muo *MatchesUpdateOne) SetNillableExpirationDate(t *time.Time) *MatchesUpdateOne {
	if t != nil {
		muo.SetExpirationDate(*t)
	}
	return muo
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (muo *MatchesUpdateOne) ClearExpirationDate() *MatchesUpdateOne {
	muo.mutation.ClearExpirationDate()
	return muo
}

// SetWalletAddress sets the "wallet_address" field.
func (muo *MatchesUpdateOne) SetWalletAddress(s string) *MatchesUpdateOne {
	muo.mutation.SetWalletAddress(s)
	return muo
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (muo *MatchesUpdateOne) SetNillableWalletAddress(s *string) *MatchesUpdateOne {
	if s != nil {
		muo.SetWalletAddress(*s)
	}
	return muo
}

// SetTransactionHash sets the "transaction_hash" field.
func (muo *MatchesUpdateOne) SetTransactionHash(s string) *MatchesUpdateOne {
	muo.mutation.SetTransactionHash(s)
	return muo
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (muo *MatchesUpdateOne) SetNillableTransactionHash(s *string) *MatchesUpdateOne {
	if s != nil {
		muo.SetTransactionHash(*s)
	}
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MatchesUpdateOne) SetCreatedAt(t time.Time) *MatchesUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MatchesUpdateOne) SetNillableCreatedAt(t *time.Time) *MatchesUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// AddMatchResultIDs adds the "match_results" edge to the MatchResults entity by IDs.
func (muo *MatchesUpdateOne) AddMatchResultIDs(ids ...int) *MatchesUpdateOne {
	muo.mutation.AddMatchResultIDs(ids...)
	return muo
}

// AddMatchResults adds the "match_results" edges to the MatchResults entity.
func (muo *MatchesUpdateOne) AddMatchResults(m ...*MatchResults) *MatchesUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMatchResultIDs(ids...)
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (muo *MatchesUpdateOne) SetUserID(id int) *MatchesUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetUser sets the "user" edge to the Users entity.
func (muo *MatchesUpdateOne) SetUser(u *Users) *MatchesUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MatchesMutation object of the builder.
func (muo *MatchesUpdateOne) Mutation() *MatchesMutation {
	return muo.mutation
}

// ClearMatchResults clears all "match_results" edges to the MatchResults entity.
func (muo *MatchesUpdateOne) ClearMatchResults() *MatchesUpdateOne {
	muo.mutation.ClearMatchResults()
	return muo
}

// RemoveMatchResultIDs removes the "match_results" edge to MatchResults entities by IDs.
func (muo *MatchesUpdateOne) RemoveMatchResultIDs(ids ...int) *MatchesUpdateOne {
	muo.mutation.RemoveMatchResultIDs(ids...)
	return muo
}

// RemoveMatchResults removes "match_results" edges to MatchResults entities.
func (muo *MatchesUpdateOne) RemoveMatchResults(m ...*MatchResults) *MatchesUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMatchResultIDs(ids...)
}

// ClearUser clears the "user" edge to the Users entity.
func (muo *MatchesUpdateOne) ClearUser() *MatchesUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Where appends a list predicates to the MatchesUpdate builder.
func (muo *MatchesUpdateOne) Where(ps ...predicate.Matches) *MatchesUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MatchesUpdateOne) Select(field string, fields ...string) *MatchesUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Matches entity.
func (muo *MatchesUpdateOne) Save(ctx context.Context) (*Matches, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MatchesUpdateOne) SaveX(ctx context.Context) *Matches {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MatchesUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MatchesUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MatchesUpdateOne) check() error {
	if v, ok := muo.mutation.GameHashID(); ok {
		if err := matches.GameHashIDValidator(v); err != nil {
			return &ValidationError{Name: "game_hash_id", err: fmt.Errorf(`ent: validator failed for field "Matches.game_hash_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.WalletAddress(); ok {
		if err := matches.WalletAddressValidator(v); err != nil {
			return &ValidationError{Name: "wallet_address", err: fmt.Errorf(`ent: validator failed for field "Matches.wallet_address": %w`, err)}
		}
	}
	if v, ok := muo.mutation.TransactionHash(); ok {
		if err := matches.TransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "transaction_hash", err: fmt.Errorf(`ent: validator failed for field "Matches.transaction_hash": %w`, err)}
		}
	}
	if muo.mutation.UserCleared() && len(muo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Matches.user"`)
	}
	return nil
}

func (muo *MatchesUpdateOne) sqlSave(ctx context.Context) (_node *Matches, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(matches.Table, matches.Columns, sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Matches.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, matches.FieldID)
		for _, f := range fields {
			if !matches.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != matches.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.GameHashID(); ok {
		_spec.SetField(matches.FieldGameHashID, field.TypeString, value)
	}
	if value, ok := muo.mutation.ExpirationDate(); ok {
		_spec.SetField(matches.FieldExpirationDate, field.TypeTime, value)
	}
	if muo.mutation.ExpirationDateCleared() {
		_spec.ClearField(matches.FieldExpirationDate, field.TypeTime)
	}
	if value, ok := muo.mutation.WalletAddress(); ok {
		_spec.SetField(matches.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := muo.mutation.TransactionHash(); ok {
		_spec.SetField(matches.FieldTransactionHash, field.TypeString, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(matches.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.MatchResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   matches.MatchResultsTable,
			Columns: []string{matches.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMatchResultsIDs(); len(nodes) > 0 && !muo.mutation.MatchResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   matches.MatchResultsTable,
			Columns: []string{matches.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MatchResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   matches.MatchResultsTable,
			Columns: []string{matches.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matches.UserTable,
			Columns: []string{matches.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matches.UserTable,
			Columns: []string{matches.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Matches{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matches.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
