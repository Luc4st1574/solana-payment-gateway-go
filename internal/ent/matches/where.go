// Code generated by ent, DO NOT EDIT.

package matches

import (
	"bitsnake-server/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Matches {
	return predicate.Matches(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Matches {
	return predicate.Matches(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Matches {
	return predicate.Matches(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Matches {
	return predicate.Matches(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Matches {
	return predicate.Matches(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Matches {
	return predicate.Matches(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Matches {
	return predicate.Matches(sql.FieldLTE(FieldID, id))
}

// GameHashID applies equality check predicate on the "game_hash_id" field. It's identical to GameHashIDEQ.
func GameHashID(v string) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldGameHashID, v))
}

// ExpirationDate applies equality check predicate on the "expiration_date" field. It's identical to ExpirationDateEQ.
func ExpirationDate(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldExpirationDate, v))
}

// WalletAddress applies equality check predicate on the "wallet_address" field. It's identical to WalletAddressEQ.
func WalletAddress(v string) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldWalletAddress, v))
}

// TransactionHash applies equality check predicate on the "transaction_hash" field. It's identical to TransactionHashEQ.
func TransactionHash(v string) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldTransactionHash, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldCreatedAt, v))
}

// GameHashIDEQ applies the EQ predicate on the "game_hash_id" field.
func GameHashIDEQ(v string) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldGameHashID, v))
}

// GameHashIDNEQ applies the NEQ predicate on the "game_hash_id" field.
func GameHashIDNEQ(v string) predicate.Matches {
	return predicate.Matches(sql.FieldNEQ(FieldGameHashID, v))
}

// GameHashIDIn applies the In predicate on the "game_hash_id" field.
func GameHashIDIn(vs ...string) predicate.Matches {
	return predicate.Matches(sql.FieldIn(FieldGameHashID, vs...))
}

// GameHashIDNotIn applies the NotIn predicate on the "game_hash_id" field.
func GameHashIDNotIn(vs ...string) predicate.Matches {
	return predicate.Matches(sql.FieldNotIn(FieldGameHashID, vs...))
}

// GameHashIDGT applies the GT predicate on the "game_hash_id" field.
func GameHashIDGT(v string) predicate.Matches {
	return predicate.Matches(sql.FieldGT(FieldGameHashID, v))
}

// GameHashIDGTE applies the GTE predicate on the "game_hash_id" field.
func GameHashIDGTE(v string) predicate.Matches {
	return predicate.Matches(sql.FieldGTE(FieldGameHashID, v))
}

// GameHashIDLT applies the LT predicate on the "game_hash_id" field.
func GameHashIDLT(v string) predicate.Matches {
	return predicate.Matches(sql.FieldLT(FieldGameHashID, v))
}

// GameHashIDLTE applies the LTE predicate on the "game_hash_id" field.
func GameHashIDLTE(v string) predicate.Matches {
	return predicate.Matches(sql.FieldLTE(FieldGameHashID, v))
}

// GameHashIDContains applies the Contains predicate on the "game_hash_id" field.
func GameHashIDContains(v string) predicate.Matches {
	return predicate.Matches(sql.FieldContains(FieldGameHashID, v))
}

// GameHashIDHasPrefix applies the HasPrefix predicate on the "game_hash_id" field.
func GameHashIDHasPrefix(v string) predicate.Matches {
	return predicate.Matches(sql.FieldHasPrefix(FieldGameHashID, v))
}

// GameHashIDHasSuffix applies the HasSuffix predicate on the "game_hash_id" field.
func GameHashIDHasSuffix(v string) predicate.Matches {
	return predicate.Matches(sql.FieldHasSuffix(FieldGameHashID, v))
}

// GameHashIDEqualFold applies the EqualFold predicate on the "game_hash_id" field.
func GameHashIDEqualFold(v string) predicate.Matches {
	return predicate.Matches(sql.FieldEqualFold(FieldGameHashID, v))
}

// GameHashIDContainsFold applies the ContainsFold predicate on the "game_hash_id" field.
func GameHashIDContainsFold(v string) predicate.Matches {
	return predicate.Matches(sql.FieldContainsFold(FieldGameHashID, v))
}

// ExpirationDateEQ applies the EQ predicate on the "expiration_date" field.
func ExpirationDateEQ(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldExpirationDate, v))
}

// ExpirationDateNEQ applies the NEQ predicate on the "expiration_date" field.
func ExpirationDateNEQ(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldNEQ(FieldExpirationDate, v))
}

// ExpirationDateIn applies the In predicate on the "expiration_date" field.
func ExpirationDateIn(vs ...time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldIn(FieldExpirationDate, vs...))
}

// ExpirationDateNotIn applies the NotIn predicate on the "expiration_date" field.
func ExpirationDateNotIn(vs ...time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldNotIn(FieldExpirationDate, vs...))
}

// ExpirationDateGT applies the GT predicate on the "expiration_date" field.
func ExpirationDateGT(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldGT(FieldExpirationDate, v))
}

// ExpirationDateGTE applies the GTE predicate on the "expiration_date" field.
func ExpirationDateGTE(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldGTE(FieldExpirationDate, v))
}

// ExpirationDateLT applies the LT predicate on the "expiration_date" field.
func ExpirationDateLT(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldLT(FieldExpirationDate, v))
}

// ExpirationDateLTE applies the LTE predicate on the "expiration_date" field.
func ExpirationDateLTE(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldLTE(FieldExpirationDate, v))
}

// ExpirationDateIsNil applies the IsNil predicate on the "expiration_date" field.
func ExpirationDateIsNil() predicate.Matches {
	return predicate.Matches(sql.FieldIsNull(FieldExpirationDate))
}

// ExpirationDateNotNil applies the NotNil predicate on the "expiration_date" field.
func ExpirationDateNotNil() predicate.Matches {
	return predicate.Matches(sql.FieldNotNull(FieldExpirationDate))
}

// WalletAddressEQ applies the EQ predicate on the "wallet_address" field.
func WalletAddressEQ(v string) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldWalletAddress, v))
}

// WalletAddressNEQ applies the NEQ predicate on the "wallet_address" field.
func WalletAddressNEQ(v string) predicate.Matches {
	return predicate.Matches(sql.FieldNEQ(FieldWalletAddress, v))
}

// WalletAddressIn applies the In predicate on the "wallet_address" field.
func WalletAddressIn(vs ...string) predicate.Matches {
	return predicate.Matches(sql.FieldIn(FieldWalletAddress, vs...))
}

// WalletAddressNotIn applies the NotIn predicate on the "wallet_address" field.
func WalletAddressNotIn(vs ...string) predicate.Matches {
	return predicate.Matches(sql.FieldNotIn(FieldWalletAddress, vs...))
}

// WalletAddressGT applies the GT predicate on the "wallet_address" field.
func WalletAddressGT(v string) predicate.Matches {
	return predicate.Matches(sql.FieldGT(FieldWalletAddress, v))
}

// WalletAddressGTE applies the GTE predicate on the "wallet_address" field.
func WalletAddressGTE(v string) predicate.Matches {
	return predicate.Matches(sql.FieldGTE(FieldWalletAddress, v))
}

// WalletAddressLT applies the LT predicate on the "wallet_address" field.
func WalletAddressLT(v string) predicate.Matches {
	return predicate.Matches(sql.FieldLT(FieldWalletAddress, v))
}

// WalletAddressLTE applies the LTE predicate on the "wallet_address" field.
func WalletAddressLTE(v string) predicate.Matches {
	return predicate.Matches(sql.FieldLTE(FieldWalletAddress, v))
}

// WalletAddressContains applies the Contains predicate on the "wallet_address" field.
func WalletAddressContains(v string) predicate.Matches {
	return predicate.Matches(sql.FieldContains(FieldWalletAddress, v))
}

// WalletAddressHasPrefix applies the HasPrefix predicate on the "wallet_address" field.
func WalletAddressHasPrefix(v string) predicate.Matches {
	return predicate.Matches(sql.FieldHasPrefix(FieldWalletAddress, v))
}

// WalletAddressHasSuffix applies the HasSuffix predicate on the "wallet_address" field.
func WalletAddressHasSuffix(v string) predicate.Matches {
	return predicate.Matches(sql.FieldHasSuffix(FieldWalletAddress, v))
}

// WalletAddressEqualFold applies the EqualFold predicate on the "wallet_address" field.
func WalletAddressEqualFold(v string) predicate.Matches {
	return predicate.Matches(sql.FieldEqualFold(FieldWalletAddress, v))
}

// WalletAddressContainsFold applies the ContainsFold predicate on the "wallet_address" field.
func WalletAddressContainsFold(v string) predicate.Matches {
	return predicate.Matches(sql.FieldContainsFold(FieldWalletAddress, v))
}

// TransactionHashEQ applies the EQ predicate on the "transaction_hash" field.
func TransactionHashEQ(v string) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldTransactionHash, v))
}

// TransactionHashNEQ applies the NEQ predicate on the "transaction_hash" field.
func TransactionHashNEQ(v string) predicate.Matches {
	return predicate.Matches(sql.FieldNEQ(FieldTransactionHash, v))
}

// TransactionHashIn applies the In predicate on the "transaction_hash" field.
func TransactionHashIn(vs ...string) predicate.Matches {
	return predicate.Matches(sql.FieldIn(FieldTransactionHash, vs...))
}

// TransactionHashNotIn applies the NotIn predicate on the "transaction_hash" field.
func TransactionHashNotIn(vs ...string) predicate.Matches {
	return predicate.Matches(sql.FieldNotIn(FieldTransactionHash, vs...))
}

// TransactionHashGT applies the GT predicate on the "transaction_hash" field.
func TransactionHashGT(v string) predicate.Matches {
	return predicate.Matches(sql.FieldGT(FieldTransactionHash, v))
}

// TransactionHashGTE applies the GTE predicate on the "transaction_hash" field.
func TransactionHashGTE(v string) predicate.Matches {
	return predicate.Matches(sql.FieldGTE(FieldTransactionHash, v))
}

// TransactionHashLT applies the LT predicate on the "transaction_hash" field.
func TransactionHashLT(v string) predicate.Matches {
	return predicate.Matches(sql.FieldLT(FieldTransactionHash, v))
}

// TransactionHashLTE applies the LTE predicate on the "transaction_hash" field.
func TransactionHashLTE(v string) predicate.Matches {
	return predicate.Matches(sql.FieldLTE(FieldTransactionHash, v))
}

// TransactionHashContains applies the Contains predicate on the "transaction_hash" field.
func TransactionHashContains(v string) predicate.Matches {
	return predicate.Matches(sql.FieldContains(FieldTransactionHash, v))
}

// TransactionHashHasPrefix applies the HasPrefix predicate on the "transaction_hash" field.
func TransactionHashHasPrefix(v string) predicate.Matches {
	return predicate.Matches(sql.FieldHasPrefix(FieldTransactionHash, v))
}

// TransactionHashHasSuffix applies the HasSuffix predicate on the "transaction_hash" field.
func TransactionHashHasSuffix(v string) predicate.Matches {
	return predicate.Matches(sql.FieldHasSuffix(FieldTransactionHash, v))
}

// TransactionHashEqualFold applies the EqualFold predicate on the "transaction_hash" field.
func TransactionHashEqualFold(v string) predicate.Matches {
	return predicate.Matches(sql.FieldEqualFold(FieldTransactionHash, v))
}

// TransactionHashContainsFold applies the ContainsFold predicate on the "transaction_hash" field.
func TransactionHashContainsFold(v string) predicate.Matches {
	return predicate.Matches(sql.FieldContainsFold(FieldTransactionHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Matches {
	return predicate.Matches(sql.FieldLTE(FieldCreatedAt, v))
}

// HasMatchResults applies the HasEdge predicate on the "match_results" edge.
func HasMatchResults() predicate.Matches {
	return predicate.Matches(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MatchResultsTable, MatchResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchResultsWith applies the HasEdge predicate on the "match_results" edge with a given conditions (other predicates).
func HasMatchResultsWith(preds ...predicate.MatchResults) predicate.Matches {
	return predicate.Matches(func(s *sql.Selector) {
		step := newMatchResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Matches {
	return predicate.Matches(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.Users) predicate.Matches {
	return predicate.Matches(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Matches) predicate.Matches {
	return predicate.Matches(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Matches) predicate.Matches {
	return predicate.Matches(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Matches) predicate.Matches {
	return predicate.Matches(sql.NotPredicates(p))
}
