// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/matches"
	"bitsnake-server/internal/ent/matchresults"
	"bitsnake-server/internal/ent/predicate"
	"bitsnake-server/internal/ent/users"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchResultsUpdate is the builder for updating MatchResults entities.
type MatchResultsUpdate struct {
	config
	hooks    []Hook
	mutation *MatchResultsMutation
}

// Where appends a list predicates to the MatchResultsUpdate builder.
func (mru *MatchResultsUpdate) Where(ps ...predicate.MatchResults) *MatchResultsUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetKills sets the "kills" field.
func (mru *MatchResultsUpdate) SetKills(i int) *MatchResultsUpdate {
	mru.mutation.ResetKills()
	mru.mutation.SetKills(i)
	return mru
}

// SetNillableKills sets the "kills" field if the given value is not nil.
func (mru *MatchResultsUpdate) SetNillableKills(i *int) *MatchResultsUpdate {
	if i != nil {
		mru.SetKills(*i)
	}
	return mru
}

// AddKills adds i to the "kills" field.
func (mru *MatchResultsUpdate) AddKills(i int) *MatchResultsUpdate {
	mru.mutation.AddKills(i)
	return mru
}

// SetIsWinner sets the "is_winner" field.
func (mru *MatchResultsUpdate) SetIsWinner(b bool) *MatchResultsUpdate {
	mru.mutation.SetIsWinner(b)
	return mru
}

// SetNillableIsWinner sets the "is_winner" field if the given value is not nil.
func (mru *MatchResultsUpdate) SetNillableIsWinner(b *bool) *MatchResultsUpdate {
	if b != nil {
		mru.SetIsWinner(*b)
	}
	return mru
}

// SetRewardAmount sets the "reward_amount" field.
func (mru *MatchResultsUpdate) SetRewardAmount(f float64) *MatchResultsUpdate {
	mru.mutation.ResetRewardAmount()
	mru.mutation.SetRewardAmount(f)
	return mru
}

// SetNillableRewardAmount sets the "reward_amount" field if the given value is not nil.
func (mru *MatchResultsUpdate) SetNillableRewardAmount(f *float64) *MatchResultsUpdate {
	if f != nil {
		mru.SetRewardAmount(*f)
	}
	return mru
}

// AddRewardAmount adds f to the "reward_amount" field.
func (mru *MatchResultsUpdate) AddRewardAmount(f float64) *MatchResultsUpdate {
	mru.mutation.AddRewardAmount(f)
	return mru
}

// ClearRewardAmount clears the value of the "reward_amount" field.
func (mru *MatchResultsUpdate) ClearRewardAmount() *MatchResultsUpdate {
	mru.mutation.ClearRewardAmount()
	return mru
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (mru *MatchResultsUpdate) SetUserID(id int) *MatchResultsUpdate {
	mru.mutation.SetUserID(id)
	return mru
}

// SetUser sets the "user" edge to the Users entity.
func (mru *MatchResultsUpdate) SetUser(u *Users) *MatchResultsUpdate {
	return mru.SetUserID(u.ID)
}

// SetMatchID sets the "match" edge to the Matches entity by ID.
func (mru *MatchResultsUpdate) SetMatchID(id int) *MatchResultsUpdate {
	mru.mutation.SetMatchID(id)
	return mru
}

// SetMatch sets the "match" edge to the Matches entity.
func (mru *MatchResultsUpdate) SetMatch(m *Matches) *MatchResultsUpdate {
	return mru.SetMatchID(m.ID)
}

// Mutation returns the MatchResultsMutation object of the builder.
func (mru *MatchResultsUpdate) Mutation() *MatchResultsMutation {
	return mru.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (mru *MatchResultsUpdate) ClearUser() *MatchResultsUpdate {
	mru.mutation.ClearUser()
	return mru
}

// ClearMatch clears the "match" edge to the Matches entity.
func (mru *MatchResultsUpdate) ClearMatch() *MatchResultsUpdate {
	mru.mutation.ClearMatch()
	return mru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MatchResultsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mru.sqlSave, mru.mutation, mru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MatchResultsUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MatchResultsUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MatchResultsUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mru *MatchResultsUpdate) check() error {
	if mru.mutation.UserCleared() && len(mru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MatchResults.user"`)
	}
	if mru.mutation.MatchCleared() && len(mru.mutation.MatchIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MatchResults.match"`)
	}
	return nil
}

func (mru *MatchResultsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(matchresults.Table, matchresults.Columns, sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt))
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.Kills(); ok {
		_spec.SetField(matchresults.FieldKills, field.TypeInt, value)
	}
	if value, ok := mru.mutation.AddedKills(); ok {
		_spec.AddField(matchresults.FieldKills, field.TypeInt, value)
	}
	if value, ok := mru.mutation.IsWinner(); ok {
		_spec.SetField(matchresults.FieldIsWinner, field.TypeBool, value)
	}
	if value, ok := mru.mutation.RewardAmount(); ok {
		_spec.SetField(matchresults.FieldRewardAmount, field.TypeFloat64, value)
	}
	if value, ok := mru.mutation.AddedRewardAmount(); ok {
		_spec.AddField(matchresults.FieldRewardAmount, field.TypeFloat64, value)
	}
	if mru.mutation.RewardAmountCleared() {
		_spec.ClearField(matchresults.FieldRewardAmount, field.TypeFloat64)
	}
	if mru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.UserTable,
			Columns: []string{matchresults.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.UserTable,
			Columns: []string{matchresults.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mru.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.MatchTable,
			Columns: []string{matchresults.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.MatchTable,
			Columns: []string{matchresults.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchresults.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mru.mutation.done = true
	return n, nil
}

// MatchResultsUpdateOne is the builder for updating a single MatchResults entity.
type MatchResultsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchResultsMutation
}

// SetKills sets the "kills" field.
func (mruo *MatchResultsUpdateOne) SetKills(i int) *MatchResultsUpdateOne {
	mruo.mutation.ResetKills()
	mruo.mutation.SetKills(i)
	return mruo
}

// SetNillableKills sets the "kills" field if the given value is not nil.
func (mruo *MatchResultsUpdateOne) SetNillableKills(i *int) *MatchResultsUpdateOne {
	if i != nil {
		mruo.SetKills(*i)
	}
	return mruo
}

// AddKills adds i to the "kills" field.
func (mruo *MatchResultsUpdateOne) AddKills(i int) *MatchResultsUpdateOne {
	mruo.mutation.AddKills(i)
	return mruo
}

// SetIsWinner sets the "is_winner" field.
func (mruo *MatchResultsUpdateOne) SetIsWinner(b bool) *MatchResultsUpdateOne {
	mruo.mutation.SetIsWinner(b)
	return mruo
}

// SetNillableIsWinner sets the "is_winner" field if the given value is not nil.
func (mruo *MatchResultsUpdateOne) SetNillableIsWinner(b *bool) *MatchResultsUpdateOne {
	if b != nil {
		mruo.SetIsWinner(*b)
	}
	return mruo
}

// SetRewardAmount sets the "reward_amount" field.
func (mruo *MatchResultsUpdateOne) SetRewardAmount(f float64) *MatchResultsUpdateOne {
	mruo.mutation.ResetRewardAmount()
	mruo.mutation.SetRewardAmount(f)
	return mruo
}

// SetNillableRewardAmount sets the "reward_amount" field if the given value is not nil.
func (mruo *MatchResultsUpdateOne) SetNillableRewardAmount(f *float64) *MatchResultsUpdateOne {
	if f != nil {
		mruo.SetRewardAmount(*f)
	}
	return mruo
}

// AddRewardAmount adds f to the "reward_amount" field.
func (mruo *MatchResultsUpdateOne) AddRewardAmount(f float64) *MatchResultsUpdateOne {
	mruo.mutation.AddRewardAmount(f)
	return mruo
}

// ClearRewardAmount clears the value of the "reward_amount" field.
func (mruo *MatchResultsUpdateOne) ClearRewardAmount() *MatchResultsUpdateOne {
	mruo.mutation.ClearRewardAmount()
	return mruo
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (mruo *MatchResultsUpdateOne) SetUserID(id int) *MatchResultsUpdateOne {
	mruo.mutation.SetUserID(id)
	return mruo
}

// SetUser sets the "user" edge to the Users entity.
func (mruo *MatchResultsUpdateOne) SetUser(u *Users) *MatchResultsUpdateOne {
	return mruo.SetUserID(u.ID)
}

// SetMatchID sets the "match" edge to the Matches entity by ID.
func (mruo *MatchResultsUpdateOne) SetMatchID(id int) *MatchResultsUpdateOne {
	mruo.mutation.SetMatchID(id)
	return mruo
}

// SetMatch sets the "match" edge to the Matches entity.
func (mruo *MatchResultsUpdateOne) SetMatch(m *Matches) *MatchResultsUpdateOne {
	return mruo.SetMatchID(m.ID)
}

// Mutation returns the MatchResultsMutation object of the builder.
func (mruo *MatchResultsUpdateOne) Mutation() *MatchResultsMutation {
	return mruo.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (mruo *MatchResultsUpdateOne) ClearUser() *MatchResultsUpdateOne {
	mruo.mutation.ClearUser()
	return mruo
}

// ClearMatch clears the "match" edge to the Matches entity.
func (mruo *MatchResultsUpdateOne) ClearMatch() *MatchResultsUpdateOne {
	mruo.mutation.ClearMatch()
	return mruo
}

// Where appends a list predicates to the MatchResultsUpdate builder.
func (mruo *MatchResultsUpdateOne) Where(ps ...predicate.MatchResults) *MatchResultsUpdateOne {
	mruo.mutation.Where(ps...)
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MatchResultsUpdateOne) Select(field string, fields ...string) *MatchResultsUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MatchResults entity.
func (mruo *MatchResultsUpdateOne) Save(ctx context.Context) (*MatchResults, error) {
	return withHooks(ctx, mruo.sqlSave, mruo.mutation, mruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MatchResultsUpdateOne) SaveX(ctx context.Context) *MatchResults {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MatchResultsUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MatchResultsUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mruo *MatchResultsUpdateOne) check() error {
	if mruo.mutation.UserCleared() && len(mruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MatchResults.user"`)
	}
	if mruo.mutation.MatchCleared() && len(mruo.mutation.MatchIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MatchResults.match"`)
	}
	return nil
}

func (mruo *MatchResultsUpdateOne) sqlSave(ctx context.Context) (_node *MatchResults, err error) {
	if err := mruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(matchresults.Table, matchresults.Columns, sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt))
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MatchResults.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, matchresults.FieldID)
		for _, f := range fields {
			if !matchresults.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != matchresults.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.Kills(); ok {
		_spec.SetField(matchresults.FieldKills, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.AddedKills(); ok {
		_spec.AddField(matchresults.FieldKills, field.TypeInt, value)
	}
	if value, ok := mruo.mutation.IsWinner(); ok {
		_spec.SetField(matchresults.FieldIsWinner, field.TypeBool, value)
	}
	if value, ok := mruo.mutation.RewardAmount(); ok {
		_spec.SetField(matchresults.FieldRewardAmount, field.TypeFloat64, value)
	}
	if value, ok := mruo.mutation.AddedRewardAmount(); ok {
		_spec.AddField(matchresults.FieldRewardAmount, field.TypeFloat64, value)
	}
	if mruo.mutation.RewardAmountCleared() {
		_spec.ClearField(matchresults.FieldRewardAmount, field.TypeFloat64)
	}
	if mruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.UserTable,
			Columns: []string{matchresults.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.UserTable,
			Columns: []string{matchresults.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mruo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.MatchTable,
			Columns: []string{matchresults.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchresults.MatchTable,
			Columns: []string{matchresults.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MatchResults{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchresults.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mruo.mutation.done = true
	return _node, nil
}
