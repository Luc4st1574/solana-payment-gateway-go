// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/matches"
	"bitsnake-server/internal/ent/matchresults"
	"bitsnake-server/internal/ent/users"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MatchResults is the model entity for the MatchResults schema.
type MatchResults struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Kills holds the value of the "kills" field.
	Kills int `json:"kills,omitempty"`
	// IsWinner holds the value of the "is_winner" field.
	IsWinner bool `json:"is_winner,omitempty"`
	// RewardAmount holds the value of the "reward_amount" field.
	RewardAmount *float64 `json:"reward_amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchResultsQuery when eager-loading is set.
	Edges                 MatchResultsEdges `json:"edges"`
	matches_match_results *int
	users_match_results   *int
	selectValues          sql.SelectValues
}

// MatchResultsEdges holds the relations/edges for other nodes in the graph.
type MatchResultsEdges struct {
	// User holds the value of the user edge.
	User *Users `json:"user,omitempty"`
	// Match holds the value of the match edge.
	Match *Matches `json:"match,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchResultsEdges) UserOrErr() (*Users, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MatchOrErr returns the Match value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchResultsEdges) MatchOrErr() (*Matches, error) {
	if e.Match != nil {
		return e.Match, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: matches.Label}
	}
	return nil, &NotLoadedError{edge: "match"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MatchResults) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case matchresults.FieldIsWinner:
			values[i] = new(sql.NullBool)
		case matchresults.FieldRewardAmount:
			values[i] = new(sql.NullFloat64)
		case matchresults.FieldID, matchresults.FieldKills:
			values[i] = new(sql.NullInt64)
		case matchresults.ForeignKeys[0]: // matches_match_results
			values[i] = new(sql.NullInt64)
		case matchresults.ForeignKeys[1]: // users_match_results
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MatchResults fields.
func (mr *MatchResults) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case matchresults.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mr.ID = int(value.Int64)
		case matchresults.FieldKills:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field kills", values[i])
			} else if value.Valid {
				mr.Kills = int(value.Int64)
			}
		case matchresults.FieldIsWinner:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_winner", values[i])
			} else if value.Valid {
				mr.IsWinner = value.Bool
			}
		case matchresults.FieldRewardAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field reward_amount", values[i])
			} else if value.Valid {
				mr.RewardAmount = new(float64)
				*mr.RewardAmount = value.Float64
			}
		case matchresults.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field matches_match_results", value)
			} else if value.Valid {
				mr.matches_match_results = new(int)
				*mr.matches_match_results = int(value.Int64)
			}
		case matchresults.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_match_results", value)
			} else if value.Valid {
				mr.users_match_results = new(int)
				*mr.users_match_results = int(value.Int64)
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MatchResults.
// This includes values selected through modifiers, order, etc.
func (mr *MatchResults) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the MatchResults entity.
func (mr *MatchResults) QueryUser() *UsersQuery {
	return NewMatchResultsClient(mr.config).QueryUser(mr)
}

// QueryMatch queries the "match" edge of the MatchResults entity.
func (mr *MatchResults) QueryMatch() *MatchesQuery {
	return NewMatchResultsClient(mr.config).QueryMatch(mr)
}

// Update returns a builder for updating this MatchResults.
// Note that you need to call MatchResults.Unwrap() before calling this method if this MatchResults
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MatchResults) Update() *MatchResultsUpdateOne {
	return NewMatchResultsClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the MatchResults entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MatchResults) Unwrap() *MatchResults {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MatchResults is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MatchResults) String() string {
	var builder strings.Builder
	builder.WriteString("MatchResults(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("kills=")
	builder.WriteString(fmt.Sprintf("%v", mr.Kills))
	builder.WriteString(", ")
	builder.WriteString("is_winner=")
	builder.WriteString(fmt.Sprintf("%v", mr.IsWinner))
	builder.WriteString(", ")
	if v := mr.RewardAmount; v != nil {
		builder.WriteString("reward_amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MatchResultsSlice is a parsable slice of MatchResults.
type MatchResultsSlice []*MatchResults
