// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/paymentverifications"
	"bitsnake-server/internal/ent/predicate"
	"bitsnake-server/internal/ent/users"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentVerificationsQuery is the builder for querying PaymentVerifications entities.
type PaymentVerificationsQuery struct {
	config
	ctx        *QueryContext
	order      []paymentverifications.OrderOption
	inters     []Interceptor
	predicates []predicate.PaymentVerifications
	withUser   *UsersQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PaymentVerificationsQuery builder.
func (pvq *PaymentVerificationsQuery) Where(ps ...predicate.PaymentVerifications) *PaymentVerificationsQuery {
	pvq.predicates = append(pvq.predicates, ps...)
	return pvq
}

// Limit the number of records to be returned by this query.
func (pvq *PaymentVerificationsQuery) Limit(limit int) *PaymentVerificationsQuery {
	pvq.ctx.Limit = &limit
	return pvq
}

// Offset to start from.
func (pvq *PaymentVerificationsQuery) Offset(offset int) *PaymentVerificationsQuery {
	pvq.ctx.Offset = &offset
	return pvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pvq *PaymentVerificationsQuery) Unique(unique bool) *PaymentVerificationsQuery {
	pvq.ctx.Unique = &unique
	return pvq
}

// Order specifies how the records should be ordered.
func (pvq *PaymentVerificationsQuery) Order(o ...paymentverifications.OrderOption) *PaymentVerificationsQuery {
	pvq.order = append(pvq.order, o...)
	return pvq
}

// QueryUser chains the current query on the "user" edge.
func (pvq *PaymentVerificationsQuery) QueryUser() *UsersQuery {
	query := (&UsersClient{config: pvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentverifications.Table, paymentverifications.FieldID, selector),
			sqlgraph.To(users.Table, users.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentverifications.UserTable, paymentverifications.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(pvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PaymentVerifications entity from the query.
// Returns a *NotFoundError when no PaymentVerifications was found.
func (pvq *PaymentVerificationsQuery) First(ctx context.Context) (*PaymentVerifications, error) {
	nodes, err := pvq.Limit(1).All(setContextOp(ctx, pvq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{paymentverifications.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pvq *PaymentVerificationsQuery) FirstX(ctx context.Context) *PaymentVerifications {
	node, err := pvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PaymentVerifications ID from the query.
// Returns a *NotFoundError when no PaymentVerifications ID was found.
func (pvq *PaymentVerificationsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pvq.Limit(1).IDs(setContextOp(ctx, pvq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paymentverifications.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pvq *PaymentVerificationsQuery) FirstIDX(ctx context.Context) int {
	id, err := pvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PaymentVerifications entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PaymentVerifications entity is found.
// Returns a *NotFoundError when no PaymentVerifications entities are found.
func (pvq *PaymentVerificationsQuery) Only(ctx context.Context) (*PaymentVerifications, error) {
	nodes, err := pvq.Limit(2).All(setContextOp(ctx, pvq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{paymentverifications.Label}
	default:
		return nil, &NotSingularError{paymentverifications.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pvq *PaymentVerificationsQuery) OnlyX(ctx context.Context) *PaymentVerifications {
	node, err := pvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PaymentVerifications ID in the query.
// Returns a *NotSingularError when more than one PaymentVerifications ID is found.
// Returns a *NotFoundError when no entities are found.
func (pvq *PaymentVerificationsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pvq.Limit(2).IDs(setContextOp(ctx, pvq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paymentverifications.Label}
	default:
		err = &NotSingularError{paymentverifications.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pvq *PaymentVerificationsQuery) OnlyIDX(ctx context.Context) int {
	id, err := pvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PaymentVerificationsSlice.
func (pvq *PaymentVerificationsQuery) All(ctx context.Context) ([]*PaymentVerifications, error) {
	ctx = setContextOp(ctx, pvq.ctx, ent.OpQueryAll)
	if err := pvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PaymentVerifications, *PaymentVerificationsQuery]()
	return withInterceptors[[]*PaymentVerifications](ctx, pvq, qr, pvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pvq *PaymentVerificationsQuery) AllX(ctx context.Context) []*PaymentVerifications {
	nodes, err := pvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PaymentVerifications IDs.
func (pvq *PaymentVerificationsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pvq.ctx.Unique == nil && pvq.path != nil {
		pvq.Unique(true)
	}
	ctx = setContextOp(ctx, pvq.ctx, ent.OpQueryIDs)
	if err = pvq.Select(paymentverifications.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pvq *PaymentVerificationsQuery) IDsX(ctx context.Context) []int {
	ids, err := pvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pvq *PaymentVerificationsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pvq.ctx, ent.OpQueryCount)
	if err := pvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pvq, querierCount[*PaymentVerificationsQuery](), pvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pvq *PaymentVerificationsQuery) CountX(ctx context.Context) int {
	count, err := pvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pvq *PaymentVerificationsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pvq.ctx, ent.OpQueryExist)
	switch _, err := pvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pvq *PaymentVerificationsQuery) ExistX(ctx context.Context) bool {
	exist, err := pvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PaymentVerificationsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pvq *PaymentVerificationsQuery) Clone() *PaymentVerificationsQuery {
	if pvq == nil {
		return nil
	}
	return &PaymentVerificationsQuery{
		config:     pvq.config,
		ctx:        pvq.ctx.Clone(),
		order:      append([]paymentverifications.OrderOption{}, pvq.order...),
		inters:     append([]Interceptor{}, pvq.inters...),
		predicates: append([]predicate.PaymentVerifications{}, pvq.predicates...),
		withUser:   pvq.withUser.Clone(),
		// clone intermediate query.
		sql:  pvq.sql.Clone(),
		path: pvq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (pvq *PaymentVerificationsQuery) WithUser(opts ...func(*UsersQuery)) *PaymentVerificationsQuery {
	query := (&UsersClient{config: pvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pvq.withUser = query
	return pvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PaymentVerifications.Query().
//		GroupBy(paymentverifications.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pvq *PaymentVerificationsQuery) GroupBy(field string, fields ...string) *PaymentVerificationsGroupBy {
	pvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PaymentVerificationsGroupBy{build: pvq}
	grbuild.flds = &pvq.ctx.Fields
	grbuild.label = paymentverifications.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.PaymentVerifications.Query().
//		Select(paymentverifications.FieldUserID).
//		Scan(ctx, &v)
func (pvq *PaymentVerificationsQuery) Select(fields ...string) *PaymentVerificationsSelect {
	pvq.ctx.Fields = append(pvq.ctx.Fields, fields...)
	sbuild := &PaymentVerificationsSelect{PaymentVerificationsQuery: pvq}
	sbuild.label = paymentverifications.Label
	sbuild.flds, sbuild.scan = &pvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PaymentVerificationsSelect configured with the given aggregations.
func (pvq *PaymentVerificationsQuery) Aggregate(fns ...AggregateFunc) *PaymentVerificationsSelect {
	return pvq.Select().Aggregate(fns...)
}

func (pvq *PaymentVerificationsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pvq); err != nil {
				return err
			}
		}
	}
	for _, f := range pvq.ctx.Fields {
		if !paymentverifications.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pvq.path != nil {
		prev, err := pvq.path(ctx)
		if err != nil {
			return err
		}
		pvq.sql = prev
	}
	return nil
}

func (pvq *PaymentVerificationsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PaymentVerifications, error) {
	var (
		nodes       = []*PaymentVerifications{}
		_spec       = pvq.querySpec()
		loadedTypes = [1]bool{
			pvq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PaymentVerifications).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PaymentVerifications{config: pvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pvq.withUser; query != nil {
		if err := pvq.loadUser(ctx, query, nodes, nil,
			func(n *PaymentVerifications, e *Users) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pvq *PaymentVerificationsQuery) loadUser(ctx context.Context, query *UsersQuery, nodes []*PaymentVerifications, init func(*PaymentVerifications), assign func(*PaymentVerifications, *Users)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PaymentVerifications)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(users.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pvq *PaymentVerificationsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pvq.querySpec()
	_spec.Node.Columns = pvq.ctx.Fields
	if len(pvq.ctx.Fields) > 0 {
		_spec.Unique = pvq.ctx.Unique != nil && *pvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pvq.driver, _spec)
}

func (pvq *PaymentVerificationsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(paymentverifications.Table, paymentverifications.Columns, sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt))
	_spec.From = pvq.sql
	if unique := pvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pvq.path != nil {
		_spec.Unique = true
	}
	if fields := pvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentverifications.FieldID)
		for i := range fields {
			if fields[i] != paymentverifications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pvq.withUser != nil {
			_spec.Node.AddColumnOnce(paymentverifications.FieldUserID)
		}
	}
	if ps := pvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pvq *PaymentVerificationsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pvq.driver.Dialect())
	t1 := builder.Table(paymentverifications.Table)
	columns := pvq.ctx.Fields
	if len(columns) == 0 {
		columns = paymentverifications.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pvq.sql != nil {
		selector = pvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pvq.ctx.Unique != nil && *pvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pvq.predicates {
		p(selector)
	}
	for _, p := range pvq.order {
		p(selector)
	}
	if offset := pvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PaymentVerificationsGroupBy is the group-by builder for PaymentVerifications entities.
type PaymentVerificationsGroupBy struct {
	selector
	build *PaymentVerificationsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pvgb *PaymentVerificationsGroupBy) Aggregate(fns ...AggregateFunc) *PaymentVerificationsGroupBy {
	pvgb.fns = append(pvgb.fns, fns...)
	return pvgb
}

// Scan applies the selector query and scans the result into the given value.
func (pvgb *PaymentVerificationsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pvgb.build.ctx, ent.OpQueryGroupBy)
	if err := pvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentVerificationsQuery, *PaymentVerificationsGroupBy](ctx, pvgb.build, pvgb, pvgb.build.inters, v)
}

func (pvgb *PaymentVerificationsGroupBy) sqlScan(ctx context.Context, root *PaymentVerificationsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pvgb.fns))
	for _, fn := range pvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pvgb.flds)+len(pvgb.fns))
		for _, f := range *pvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PaymentVerificationsSelect is the builder for selecting fields of PaymentVerifications entities.
type PaymentVerificationsSelect struct {
	*PaymentVerificationsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pvs *PaymentVerificationsSelect) Aggregate(fns ...AggregateFunc) *PaymentVerificationsSelect {
	pvs.fns = append(pvs.fns, fns...)
	return pvs
}

// Scan applies the selector query and scans the result into the given value.
func (pvs *PaymentVerificationsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pvs.ctx, ent.OpQuerySelect)
	if err := pvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentVerificationsQuery, *PaymentVerificationsSelect](ctx, pvs.PaymentVerificationsQuery, pvs, pvs.inters, v)
}

func (pvs *PaymentVerificationsSelect) sqlScan(ctx context.Context, root *PaymentVerificationsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pvs.fns))
	for _, fn := range pvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
