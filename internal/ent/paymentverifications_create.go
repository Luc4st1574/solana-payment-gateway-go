// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/paymentverifications"
	"bitsnake-server/internal/ent/users"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentVerificationsCreate is the builder for creating a PaymentVerifications entity.
type PaymentVerificationsCreate struct {
	config
	mutation *PaymentVerificationsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (pvc *PaymentVerificationsCreate) SetUserID(i int) *PaymentVerificationsCreate {
	pvc.mutation.SetUserID(i)
	return pvc
}

// SetWalletAddress sets the "wallet_address" field.
func (pvc *PaymentVerificationsCreate) SetWalletAddress(s string) *PaymentVerificationsCreate {
	pvc.mutation.SetWalletAddress(s)
	return pvc
}

// SetAmount sets the "amount" field.
func (pvc *PaymentVerificationsCreate) SetAmount(f float64) *PaymentVerificationsCreate {
	pvc.mutation.SetAmount(f)
	return pvc
}

// SetTransactionHash sets the "transaction_hash" field.
func (pvc *PaymentVerificationsCreate) SetTransactionHash(s string) *PaymentVerificationsCreate {
	pvc.mutation.SetTransactionHash(s)
	return pvc
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (pvc *PaymentVerificationsCreate) SetNillableTransactionHash(s *string) *PaymentVerificationsCreate {
	if s != nil {
		pvc.SetTransactionHash(*s)
	}
	return pvc
}

// SetStatus sets the "status" field.
func (pvc *PaymentVerificationsCreate) SetStatus(pa paymentverifications.Status) *PaymentVerificationsCreate {
	pvc.mutation.SetStatus(pa)
	return pvc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pvc *PaymentVerificationsCreate) SetNillableStatus(pa *paymentverifications.Status) *PaymentVerificationsCreate {
	if pa != nil {
		pvc.SetStatus(*pa)
	}
	return pvc
}

// SetAccessGranted sets the "access_granted" field.
func (pvc *PaymentVerificationsCreate) SetAccessGranted(b bool) *PaymentVerificationsCreate {
	pvc.mutation.SetAccessGranted(b)
	return pvc
}

// SetNillableAccessGranted sets the "access_granted" field if the given value is not nil.
func (pvc *PaymentVerificationsCreate) SetNillableAccessGranted(b *bool) *PaymentVerificationsCreate {
	if b != nil {
		pvc.SetAccessGranted(*b)
	}
	return pvc
}

// SetCreatedAt sets the "created_at" field.
func (pvc *PaymentVerificationsCreate) SetCreatedAt(t time.Time) *PaymentVerificationsCreate {
	pvc.mutation.SetCreatedAt(t)
	return pvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvc *PaymentVerificationsCreate) SetNillableCreatedAt(t *time.Time) *PaymentVerificationsCreate {
	if t != nil {
		pvc.SetCreatedAt(*t)
	}
	return pvc
}

// SetUser sets the "user" edge to the Users entity.
func (pvc *PaymentVerificationsCreate) SetUser(u *Users) *PaymentVerificationsCreate {
	return pvc.SetUserID(u.ID)
}

// Mutation returns the PaymentVerificationsMutation object of the builder.
func (pvc *PaymentVerificationsCreate) Mutation() *PaymentVerificationsMutation {
	return pvc.mutation
}

// Save creates the PaymentVerifications in the database.
func (pvc *PaymentVerificationsCreate) Save(ctx context.Context) (*PaymentVerifications, error) {
	pvc.defaults()
	return withHooks(ctx, pvc.sqlSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *PaymentVerificationsCreate) SaveX(ctx context.Context) *PaymentVerifications {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *PaymentVerificationsCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *PaymentVerificationsCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *PaymentVerificationsCreate) defaults() {
	if _, ok := pvc.mutation.Status(); !ok {
		v := paymentverifications.DefaultStatus
		pvc.mutation.SetStatus(v)
	}
	if _, ok := pvc.mutation.AccessGranted(); !ok {
		v := paymentverifications.DefaultAccessGranted
		pvc.mutation.SetAccessGranted(v)
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		v := paymentverifications.DefaultCreatedAt()
		pvc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *PaymentVerificationsCreate) check() error {
	if _, ok := pvc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "PaymentVerifications.user_id"`)}
	}
	if _, ok := pvc.mutation.WalletAddress(); !ok {
		return &ValidationError{Name: "wallet_address", err: errors.New(`ent: missing required field "PaymentVerifications.wallet_address"`)}
	}
	if v, ok := pvc.mutation.WalletAddress(); ok {
		if err := paymentverifications.WalletAddressValidator(v); err != nil {
			return &ValidationError{Name: "wallet_address", err: fmt.Errorf(`ent: validator failed for field "PaymentVerifications.wallet_address": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "PaymentVerifications.amount"`)}
	}
	if v, ok := pvc.mutation.TransactionHash(); ok {
		if err := paymentverifications.TransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "transaction_hash", err: fmt.Errorf(`ent: validator failed for field "PaymentVerifications.transaction_hash": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PaymentVerifications.status"`)}
	}
	if v, ok := pvc.mutation.Status(); ok {
		if err := paymentverifications.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PaymentVerifications.status": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.AccessGranted(); !ok {
		return &ValidationError{Name: "access_granted", err: errors.New(`ent: missing required field "PaymentVerifications.access_granted"`)}
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentVerifications.created_at"`)}
	}
	if len(pvc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PaymentVerifications.user"`)}
	}
	return nil
}

func (pvc *PaymentVerificationsCreate) sqlSave(ctx context.Context) (*PaymentVerifications, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pvc.mutation.id = &_node.ID
	pvc.mutation.done = true
	return _node, nil
}

func (pvc *PaymentVerificationsCreate) createSpec() (*PaymentVerifications, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentVerifications{config: pvc.config}
		_spec = sqlgraph.NewCreateSpec(paymentverifications.Table, sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt))
	)
	if value, ok := pvc.mutation.WalletAddress(); ok {
		_spec.SetField(paymentverifications.FieldWalletAddress, field.TypeString, value)
		_node.WalletAddress = value
	}
	if value, ok := pvc.mutation.Amount(); ok {
		_spec.SetField(paymentverifications.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := pvc.mutation.TransactionHash(); ok {
		_spec.SetField(paymentverifications.FieldTransactionHash, field.TypeString, value)
		_node.TransactionHash = value
	}
	if value, ok := pvc.mutation.Status(); ok {
		_spec.SetField(paymentverifications.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pvc.mutation.AccessGranted(); ok {
		_spec.SetField(paymentverifications.FieldAccessGranted, field.TypeBool, value)
		_node.AccessGranted = value
	}
	if value, ok := pvc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentverifications.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := pvc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentverifications.UserTable,
			Columns: []string{paymentverifications.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentVerificationsCreateBulk is the builder for creating many PaymentVerifications entities in bulk.
type PaymentVerificationsCreateBulk struct {
	config
	err      error
	builders []*PaymentVerificationsCreate
}

// Save creates the PaymentVerifications entities in the database.
func (pvcb *PaymentVerificationsCreateBulk) Save(ctx context.Context) ([]*PaymentVerifications, error) {
	if pvcb.err != nil {
		return nil, pvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*PaymentVerifications, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentVerificationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *PaymentVerificationsCreateBulk) SaveX(ctx context.Context) []*PaymentVerifications {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *PaymentVerificationsCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *PaymentVerificationsCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
