// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/matches"
	"bitsnake-server/internal/ent/users"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Matches is the model entity for the Matches schema.
type Matches struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GameHashID holds the value of the "game_hash_id" field.
	GameHashID string `json:"game_hash_id,omitempty"`
	// ExpirationDate holds the value of the "expiration_date" field.
	ExpirationDate time.Time `json:"expiration_date,omitempty"`
	// WalletAddress holds the value of the "wallet_address" field.
	WalletAddress string `json:"wallet_address,omitempty"`
	// TransactionHash holds the value of the "transaction_hash" field.
	TransactionHash string `json:"transaction_hash,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchesQuery when eager-loading is set.
	Edges         MatchesEdges `json:"edges"`
	users_matches *int
	selectValues  sql.SelectValues
}

// MatchesEdges holds the relations/edges for other nodes in the graph.
type MatchesEdges struct {
	// MatchResults holds the value of the match_results edge.
	MatchResults []*MatchResults `json:"match_results,omitempty"`
	// User holds the value of the user edge.
	User *Users `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MatchResultsOrErr returns the MatchResults value or an error if the edge
// was not loaded in eager-loading.
func (e MatchesEdges) MatchResultsOrErr() ([]*MatchResults, error) {
	if e.loadedTypes[0] {
		return e.MatchResults, nil
	}
	return nil, &NotLoadedError{edge: "match_results"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchesEdges) UserOrErr() (*Users, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Matches) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case matches.FieldID:
			values[i] = new(sql.NullInt64)
		case matches.FieldGameHashID, matches.FieldWalletAddress, matches.FieldTransactionHash:
			values[i] = new(sql.NullString)
		case matches.FieldExpirationDate, matches.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case matches.ForeignKeys[0]: // users_matches
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Matches fields.
func (m *Matches) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case matches.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case matches.FieldGameHashID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field game_hash_id", values[i])
			} else if value.Valid {
				m.GameHashID = value.String
			}
		case matches.FieldExpirationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_date", values[i])
			} else if value.Valid {
				m.ExpirationDate = value.Time
			}
		case matches.FieldWalletAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_address", values[i])
			} else if value.Valid {
				m.WalletAddress = value.String
			}
		case matches.FieldTransactionHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_hash", values[i])
			} else if value.Valid {
				m.TransactionHash = value.String
			}
		case matches.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case matches.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_matches", value)
			} else if value.Valid {
				m.users_matches = new(int)
				*m.users_matches = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Matches.
// This includes values selected through modifiers, order, etc.
func (m *Matches) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryMatchResults queries the "match_results" edge of the Matches entity.
func (m *Matches) QueryMatchResults() *MatchResultsQuery {
	return NewMatchesClient(m.config).QueryMatchResults(m)
}

// QueryUser queries the "user" edge of the Matches entity.
func (m *Matches) QueryUser() *UsersQuery {
	return NewMatchesClient(m.config).QueryUser(m)
}

// Update returns a builder for updating this Matches.
// Note that you need to call Matches.Unwrap() before calling this method if this Matches
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Matches) Update() *MatchesUpdateOne {
	return NewMatchesClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Matches entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Matches) Unwrap() *Matches {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Matches is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Matches) String() string {
	var builder strings.Builder
	builder.WriteString("Matches(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("game_hash_id=")
	builder.WriteString(m.GameHashID)
	builder.WriteString(", ")
	builder.WriteString("expiration_date=")
	builder.WriteString(m.ExpirationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("wallet_address=")
	builder.WriteString(m.WalletAddress)
	builder.WriteString(", ")
	builder.WriteString("transaction_hash=")
	builder.WriteString(m.TransactionHash)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MatchesSlice is a parsable slice of Matches.
type MatchesSlice []*Matches
