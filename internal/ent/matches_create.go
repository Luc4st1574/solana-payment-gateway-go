// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/matches"
	"bitsnake-server/internal/ent/matchresults"
	"bitsnake-server/internal/ent/users"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchesCreate is the builder for creating a Matches entity.
type MatchesCreate struct {
	config
	mutation *MatchesMutation
	hooks    []Hook
}

// SetGameHashID sets the "game_hash_id" field.
func (mc *MatchesCreate) SetGameHashID(s string) *MatchesCreate {
	mc.mutation.SetGameHashID(s)
	return mc
}

// SetExpirationDate sets the "expiration_date" field.
func (mc *MatchesCreate) SetExpirationDate(t time.Time) *MatchesCreate {
	mc.mutation.SetExpirationDate(t)
	return mc
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (mc *MatchesCreate) SetNillableExpirationDate(t *time.Time) *MatchesCreate {
	if t != nil {
		mc.SetExpirationDate(*t)
	}
	return mc
}

// SetWalletAddress sets the "wallet_address" field.
func (mc *MatchesCreate) SetWalletAddress(s string) *MatchesCreate {
	mc.mutation.SetWalletAddress(s)
	return mc
}

// SetTransactionHash sets the "transaction_hash" field.
func (mc *MatchesCreate) SetTransactionHash(s string) *MatchesCreate {
	mc.mutation.SetTransactionHash(s)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MatchesCreate) SetCreatedAt(t time.Time) *MatchesCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MatchesCreate) SetNillableCreatedAt(t *time.Time) *MatchesCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// AddMatchResultIDs adds the "match_results" edge to the MatchResults entity by IDs.
func (mc *MatchesCreate) AddMatchResultIDs(ids ...int) *MatchesCreate {
	mc.mutation.AddMatchResultIDs(ids...)
	return mc
}

// AddMatchResults adds the "match_results" edges to the MatchResults entity.
func (mc *MatchesCreate) AddMatchResults(m ...*MatchResults) *MatchesCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMatchResultIDs(ids...)
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (mc *MatchesCreate) SetUserID(id int) *MatchesCreate {
	mc.mutation.SetUserID(id)
	return mc
}

// SetUser sets the "user" edge to the Users entity.
func (mc *MatchesCreate) SetUser(u *Users) *MatchesCreate {
	return mc.SetUserID(u.ID)
}

// Mutation returns the MatchesMutation object of the builder.
func (mc *MatchesCreate) Mutation() *MatchesMutation {
	return mc.mutation
}

// Save creates the Matches in the database.
func (mc *MatchesCreate) Save(ctx context.Context) (*Matches, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MatchesCreate) SaveX(ctx context.Context) *Matches {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MatchesCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MatchesCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MatchesCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := matches.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MatchesCreate) check() error {
	if _, ok := mc.mutation.GameHashID(); !ok {
		return &ValidationError{Name: "game_hash_id", err: errors.New(`ent: missing required field "Matches.game_hash_id"`)}
	}
	if v, ok := mc.mutation.GameHashID(); ok {
		if err := matches.GameHashIDValidator(v); err != nil {
			return &ValidationError{Name: "game_hash_id", err: fmt.Errorf(`ent: validator failed for field "Matches.game_hash_id": %w`, err)}
		}
	}
	if _, ok := mc.mutation.WalletAddress(); !ok {
		return &ValidationError{Name: "wallet_address", err: errors.New(`ent: missing required field "Matches.wallet_address"`)}
	}
	if v, ok := mc.mutation.WalletAddress(); ok {
		if err := matches.WalletAddressValidator(v); err != nil {
			return &ValidationError{Name: "wallet_address", err: fmt.Errorf(`ent: validator failed for field "Matches.wallet_address": %w`, err)}
		}
	}
	if _, ok := mc.mutation.TransactionHash(); !ok {
		return &ValidationError{Name: "transaction_hash", err: errors.New(`ent: missing required field "Matches.transaction_hash"`)}
	}
	if v, ok := mc.mutation.TransactionHash(); ok {
		if err := matches.TransactionHashValidator(v); err != nil {
			return &ValidationError{Name: "transaction_hash", err: fmt.Errorf(`ent: validator failed for field "Matches.transaction_hash": %w`, err)}
		}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Matches.created_at"`)}
	}
	if len(mc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Matches.user"`)}
	}
	return nil
}

func (mc *MatchesCreate) sqlSave(ctx context.Context) (*Matches, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MatchesCreate) createSpec() (*Matches, *sqlgraph.CreateSpec) {
	var (
		_node = &Matches{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(matches.Table, sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.GameHashID(); ok {
		_spec.SetField(matches.FieldGameHashID, field.TypeString, value)
		_node.GameHashID = value
	}
	if value, ok := mc.mutation.ExpirationDate(); ok {
		_spec.SetField(matches.FieldExpirationDate, field.TypeTime, value)
		_node.ExpirationDate = value
	}
	if value, ok := mc.mutation.WalletAddress(); ok {
		_spec.SetField(matches.FieldWalletAddress, field.TypeString, value)
		_node.WalletAddress = value
	}
	if value, ok := mc.mutation.TransactionHash(); ok {
		_spec.SetField(matches.FieldTransactionHash, field.TypeString, value)
		_node.TransactionHash = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(matches.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mc.mutation.MatchResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   matches.MatchResultsTable,
			Columns: []string{matches.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matches.UserTable,
			Columns: []string{matches.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.users_matches = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MatchesCreateBulk is the builder for creating many Matches entities in bulk.
type MatchesCreateBulk struct {
	config
	err      error
	builders []*MatchesCreate
}

// Save creates the Matches entities in the database.
func (mcb *MatchesCreateBulk) Save(ctx context.Context) ([]*Matches, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Matches, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MatchesCreateBulk) SaveX(ctx context.Context) []*Matches {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MatchesCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MatchesCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
