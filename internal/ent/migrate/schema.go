// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// MatchResultsColumns holds the columns for the "match_results" table.
	MatchResultsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "kills", Type: field.TypeInt, Default: 0},
		{Name: "is_winner", Type: field.TypeBool, Default: false},
		{Name: "reward_amount", Type: field.TypeFloat64, Nullable: true},
		{Name: "matches_match_results", Type: field.TypeInt},
		{Name: "users_match_results", Type: field.TypeInt},
	}
	// MatchResultsTable holds the schema information for the "match_results" table.
	MatchResultsTable = &schema.Table{
		Name:       "match_results",
		Columns:    MatchResultsColumns,
		PrimaryKey: []*schema.Column{MatchResultsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "match_results_matches_match_results",
				Columns:    []*schema.Column{MatchResultsColumns[4]},
				RefColumns: []*schema.Column{MatchesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "match_results_users_match_results",
				Columns:    []*schema.Column{MatchResultsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// MatchesColumns holds the columns for the "matches" table.
	MatchesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "game_hash_id", Type: field.TypeString, Unique: true},
		{Name: "expiration_date", Type: field.TypeTime, Nullable: true},
		{Name: "wallet_address", Type: field.TypeString},
		{Name: "transaction_hash", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "users_matches", Type: field.TypeInt},
	}
	// MatchesTable holds the schema information for the "matches" table.
	MatchesTable = &schema.Table{
		Name:       "matches",
		Columns:    MatchesColumns,
		PrimaryKey: []*schema.Column{MatchesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "matches_users_matches",
				Columns:    []*schema.Column{MatchesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PaymentVerificationsColumns holds the columns for the "payment_verifications" table.
	PaymentVerificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "wallet_address", Type: field.TypeString, Size: 255},
		{Name: "amount", Type: field.TypeFloat64, SchemaType: map[string]string{"postgres": "numeric(20,8)"}},
		{Name: "transaction_hash", Type: field.TypeString, Nullable: true, Size: 88},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "verified", "failed"}, Default: "pending"},
		{Name: "access_granted", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
	}
	// PaymentVerificationsTable holds the schema information for the "payment_verifications" table.
	PaymentVerificationsTable = &schema.Table{
		Name:       "payment_verifications",
		Columns:    PaymentVerificationsColumns,
		PrimaryKey: []*schema.Column{PaymentVerificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payment_verifications_users_payments",
				Columns:    []*schema.Column{PaymentVerificationsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "paymentverifications_wallet_address",
				Unique:  false,
				Columns: []*schema.Column{PaymentVerificationsColumns[1]},
			},
			{
				Name:    "paymentverifications_status",
				Unique:  false,
				Columns: []*schema.Column{PaymentVerificationsColumns[4]},
			},
			{
				Name:    "paymentverifications_created_at",
				Unique:  false,
				Columns: []*schema.Column{PaymentVerificationsColumns[6]},
			},
			{
				Name:    "paymentverifications_transaction_hash",
				Unique:  true,
				Columns: []*schema.Column{PaymentVerificationsColumns[3]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "wallet_address", Type: field.TypeString, Unique: true},
		{Name: "has_access", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		MatchResultsTable,
		MatchesTable,
		PaymentVerificationsTable,
		UsersTable,
	}
)

func init() {
	MatchResultsTable.ForeignKeys[0].RefTable = MatchesTable
	MatchResultsTable.ForeignKeys[1].RefTable = UsersTable
	MatchesTable.ForeignKeys[0].RefTable = UsersTable
	PaymentVerificationsTable.ForeignKeys[0].RefTable = UsersTable
}
