// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bitsnake-server/internal/ent/matches"
	"bitsnake-server/internal/ent/matchresults"
	"bitsnake-server/internal/ent/paymentverifications"
	"bitsnake-server/internal/ent/predicate"
	"bitsnake-server/internal/ent/users"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsersUpdate is the builder for updating Users entities.
type UsersUpdate struct {
	config
	hooks    []Hook
	mutation *UsersMutation
}

// Where appends a list predicates to the UsersUpdate builder.
func (uu *UsersUpdate) Where(ps ...predicate.Users) *UsersUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetWalletAddress sets the "wallet_address" field.
func (uu *UsersUpdate) SetWalletAddress(s string) *UsersUpdate {
	uu.mutation.SetWalletAddress(s)
	return uu
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableWalletAddress(s *string) *UsersUpdate {
	if s != nil {
		uu.SetWalletAddress(*s)
	}
	return uu
}

// SetHasAccess sets the "has_access" field.
func (uu *UsersUpdate) SetHasAccess(b bool) *UsersUpdate {
	uu.mutation.SetHasAccess(b)
	return uu
}

// SetNillableHasAccess sets the "has_access" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableHasAccess(b *bool) *UsersUpdate {
	if b != nil {
		uu.SetHasAccess(*b)
	}
	return uu
}

// AddMatchIDs adds the "matches" edge to the Matches entity by IDs.
func (uu *UsersUpdate) AddMatchIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddMatchIDs(ids...)
	return uu
}

// AddMatches adds the "matches" edges to the Matches entity.
func (uu *UsersUpdate) AddMatches(m ...*Matches) *UsersUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMatchIDs(ids...)
}

// AddMatchResultIDs adds the "match_results" edge to the MatchResults entity by IDs.
func (uu *UsersUpdate) AddMatchResultIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddMatchResultIDs(ids...)
	return uu
}

// AddMatchResults adds the "match_results" edges to the MatchResults entity.
func (uu *UsersUpdate) AddMatchResults(m ...*MatchResults) *UsersUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMatchResultIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the PaymentVerifications entity by IDs.
func (uu *UsersUpdate) AddPaymentIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddPaymentIDs(ids...)
	return uu
}

// AddPayments adds the "payments" edges to the PaymentVerifications entity.
func (uu *UsersUpdate) AddPayments(p ...*PaymentVerifications) *UsersUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPaymentIDs(ids...)
}

// Mutation returns the UsersMutation object of the builder.
func (uu *UsersUpdate) Mutation() *UsersMutation {
	return uu.mutation
}

// ClearMatches clears all "matches" edges to the Matches entity.
func (uu *UsersUpdate) ClearMatches() *UsersUpdate {
	uu.mutation.ClearMatches()
	return uu
}

// RemoveMatchIDs removes the "matches" edge to Matches entities by IDs.
func (uu *UsersUpdate) RemoveMatchIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveMatchIDs(ids...)
	return uu
}

// RemoveMatches removes "matches" edges to Matches entities.
func (uu *UsersUpdate) RemoveMatches(m ...*Matches) *UsersUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMatchIDs(ids...)
}

// ClearMatchResults clears all "match_results" edges to the MatchResults entity.
func (uu *UsersUpdate) ClearMatchResults() *UsersUpdate {
	uu.mutation.ClearMatchResults()
	return uu
}

// RemoveMatchResultIDs removes the "match_results" edge to MatchResults entities by IDs.
func (uu *UsersUpdate) RemoveMatchResultIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveMatchResultIDs(ids...)
	return uu
}

// RemoveMatchResults removes "match_results" edges to MatchResults entities.
func (uu *UsersUpdate) RemoveMatchResults(m ...*MatchResults) *UsersUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMatchResultIDs(ids...)
}

// ClearPayments clears all "payments" edges to the PaymentVerifications entity.
func (uu *UsersUpdate) ClearPayments() *UsersUpdate {
	uu.mutation.ClearPayments()
	return uu
}

// RemovePaymentIDs removes the "payments" edge to PaymentVerifications entities by IDs.
func (uu *UsersUpdate) RemovePaymentIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemovePaymentIDs(ids...)
	return uu
}

// RemovePayments removes "payments" edges to PaymentVerifications entities.
func (uu *UsersUpdate) RemovePayments(p ...*PaymentVerifications) *UsersUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UsersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UsersUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UsersUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UsersUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UsersUpdate) check() error {
	if v, ok := uu.mutation.WalletAddress(); ok {
		if err := users.WalletAddressValidator(v); err != nil {
			return &ValidationError{Name: "wallet_address", err: fmt.Errorf(`ent: validator failed for field "Users.wallet_address": %w`, err)}
		}
	}
	return nil
}

func (uu *UsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(users.Table, users.Columns, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.WalletAddress(); ok {
		_spec.SetField(users.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := uu.mutation.HasAccess(); ok {
		_spec.SetField(users.FieldHasAccess, field.TypeBool, value)
	}
	if uu.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchesTable,
			Columns: []string{users.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMatchesIDs(); len(nodes) > 0 && !uu.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchesTable,
			Columns: []string{users.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchesTable,
			Columns: []string{users.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MatchResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchResultsTable,
			Columns: []string{users.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMatchResultsIDs(); len(nodes) > 0 && !uu.mutation.MatchResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchResultsTable,
			Columns: []string{users.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MatchResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchResultsTable,
			Columns: []string{users.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.PaymentsTable,
			Columns: []string{users.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !uu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.PaymentsTable,
			Columns: []string{users.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.PaymentsTable,
			Columns: []string{users.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UsersUpdateOne is the builder for updating a single Users entity.
type UsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsersMutation
}

// SetWalletAddress sets the "wallet_address" field.
func (uuo *UsersUpdateOne) SetWalletAddress(s string) *UsersUpdateOne {
	uuo.mutation.SetWalletAddress(s)
	return uuo
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableWalletAddress(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetWalletAddress(*s)
	}
	return uuo
}

// SetHasAccess sets the "has_access" field.
func (uuo *UsersUpdateOne) SetHasAccess(b bool) *UsersUpdateOne {
	uuo.mutation.SetHasAccess(b)
	return uuo
}

// SetNillableHasAccess sets the "has_access" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableHasAccess(b *bool) *UsersUpdateOne {
	if b != nil {
		uuo.SetHasAccess(*b)
	}
	return uuo
}

// AddMatchIDs adds the "matches" edge to the Matches entity by IDs.
func (uuo *UsersUpdateOne) AddMatchIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddMatchIDs(ids...)
	return uuo
}

// AddMatches adds the "matches" edges to the Matches entity.
func (uuo *UsersUpdateOne) AddMatches(m ...*Matches) *UsersUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMatchIDs(ids...)
}

// AddMatchResultIDs adds the "match_results" edge to the MatchResults entity by IDs.
func (uuo *UsersUpdateOne) AddMatchResultIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddMatchResultIDs(ids...)
	return uuo
}

// AddMatchResults adds the "match_results" edges to the MatchResults entity.
func (uuo *UsersUpdateOne) AddMatchResults(m ...*MatchResults) *UsersUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMatchResultIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the PaymentVerifications entity by IDs.
func (uuo *UsersUpdateOne) AddPaymentIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddPaymentIDs(ids...)
	return uuo
}

// AddPayments adds the "payments" edges to the PaymentVerifications entity.
func (uuo *UsersUpdateOne) AddPayments(p ...*PaymentVerifications) *UsersUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPaymentIDs(ids...)
}

// Mutation returns the UsersMutation object of the builder.
func (uuo *UsersUpdateOne) Mutation() *UsersMutation {
	return uuo.mutation
}

// ClearMatches clears all "matches" edges to the Matches entity.
func (uuo *UsersUpdateOne) ClearMatches() *UsersUpdateOne {
	uuo.mutation.ClearMatches()
	return uuo
}

// RemoveMatchIDs removes the "matches" edge to Matches entities by IDs.
func (uuo *UsersUpdateOne) RemoveMatchIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveMatchIDs(ids...)
	return uuo
}

// RemoveMatches removes "matches" edges to Matches entities.
func (uuo *UsersUpdateOne) RemoveMatches(m ...*Matches) *UsersUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMatchIDs(ids...)
}

// ClearMatchResults clears all "match_results" edges to the MatchResults entity.
func (uuo *UsersUpdateOne) ClearMatchResults() *UsersUpdateOne {
	uuo.mutation.ClearMatchResults()
	return uuo
}

// RemoveMatchResultIDs removes the "match_results" edge to MatchResults entities by IDs.
func (uuo *UsersUpdateOne) RemoveMatchResultIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveMatchResultIDs(ids...)
	return uuo
}

// RemoveMatchResults removes "match_results" edges to MatchResults entities.
func (uuo *UsersUpdateOne) RemoveMatchResults(m ...*MatchResults) *UsersUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMatchResultIDs(ids...)
}

// ClearPayments clears all "payments" edges to the PaymentVerifications entity.
func (uuo *UsersUpdateOne) ClearPayments() *UsersUpdateOne {
	uuo.mutation.ClearPayments()
	return uuo
}

// RemovePaymentIDs removes the "payments" edge to PaymentVerifications entities by IDs.
func (uuo *UsersUpdateOne) RemovePaymentIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemovePaymentIDs(ids...)
	return uuo
}

// RemovePayments removes "payments" edges to PaymentVerifications entities.
func (uuo *UsersUpdateOne) RemovePayments(p ...*PaymentVerifications) *UsersUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePaymentIDs(ids...)
}

// Where appends a list predicates to the UsersUpdate builder.
func (uuo *UsersUpdateOne) Where(ps ...predicate.Users) *UsersUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UsersUpdateOne) Select(field string, fields ...string) *UsersUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Users entity.
func (uuo *UsersUpdateOne) Save(ctx context.Context) (*Users, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UsersUpdateOne) SaveX(ctx context.Context) *Users {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UsersUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UsersUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UsersUpdateOne) check() error {
	if v, ok := uuo.mutation.WalletAddress(); ok {
		if err := users.WalletAddressValidator(v); err != nil {
			return &ValidationError{Name: "wallet_address", err: fmt.Errorf(`ent: validator failed for field "Users.wallet_address": %w`, err)}
		}
	}
	return nil
}

func (uuo *UsersUpdateOne) sqlSave(ctx context.Context) (_node *Users, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(users.Table, users.Columns, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Users.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, users.FieldID)
		for _, f := range fields {
			if !users.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != users.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.WalletAddress(); ok {
		_spec.SetField(users.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := uuo.mutation.HasAccess(); ok {
		_spec.SetField(users.FieldHasAccess, field.TypeBool, value)
	}
	if uuo.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchesTable,
			Columns: []string{users.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMatchesIDs(); len(nodes) > 0 && !uuo.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchesTable,
			Columns: []string{users.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchesTable,
			Columns: []string{users.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matches.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MatchResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchResultsTable,
			Columns: []string{users.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMatchResultsIDs(); len(nodes) > 0 && !uuo.mutation.MatchResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchResultsTable,
			Columns: []string{users.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MatchResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.MatchResultsTable,
			Columns: []string{users.MatchResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.PaymentsTable,
			Columns: []string{users.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !uuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.PaymentsTable,
			Columns: []string{users.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   users.PaymentsTable,
			Columns: []string{users.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentverifications.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Users{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
